{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"A-Quick-Overview-of-FullStory/","text":"FullStory Fields FullStory provides the following data for any Segment: Usage trends over time, Segment Health (events per session, session length, and active time), Click type (Rage, Error, Dead), Device/Browser/Screen Resolution Breakdown, and Website Referrers. Page Insights Within each Session Playback, we can view Page Insights. Page Insights include: (1) Click Maps for each element of the Page, and (2) Inspect Mode, which shows insights by clicking on the specific page element of interest. An Engagement Heatmap overlay for each Click Map may be toggled on/off. More information here: https://help.fullstory.com/hc/en-us/articles/360020624074-Page-Insights-User-Guide Frustration Signals Know the difference between Rage Clicks, Error Clicks, and Dead Clicks: https://help.fullstory.com/hc/en-us/articles/360020624154-Rage-Clicks-Error-Clicks-Dead-Clicks-and-Thrashed-Cursor-Frustration-Signals Frustrated Sessions: https://help.fullstory.com/hc/en-us/articles/360020828013-Frustrated-Sessions Click Attribution From FullStory: \u201cWe currently use a combination of inferred page and intelligently processed CSS selector to identify and attribute clicks. Sometimes a given CSS selector can match multiple elements in the page. We currently attribute clicks to the first element we encounter. This generally isn\u2019t a problem if the element or it\u2019s parents have sufficient detail with href\u2019s, class names or IDs in the HTML. That being said, we can do better and have a solution in the works to properly attribute clicks to ambiguous elements like this.\u201d Further Reading https://help.fullstory.com/hc/en-us/categories/360001614373-User-Guides","title":"A Quick Overview of FullStory"},{"location":"Adding-local-user-accounts-to-the-docker-users-group-on-Windows-10/","text":"This is applicable only if you are on Windows 10 and get the error message 'You are not allowed to use Docker, you must be in the \"docker-users\" group\u2019 when trying to run Docker. Check what Windows 10 edition you are using. For Windows 10 editions other than Home: The instructions with images are found at this link . The steps are as follows: 1. Search and open \"Computer Management.\" 2. Go to \"Local Users and Groups.\" 3. Go to \"Users\" and add yourself to the \"docker-users\" group. For Windows 10 Home edition Open command prompt as an administrator. This is called elevated command prompt. Run the following command, replacing USER with your own: net localgroup docker-users USER /add You're good to go! Extra notes If you're curious as to why the instructions are different for Windows 10 Home, it's because Windows 10 Home is the only edition of Windows 10 without the \"Local Users and Groups\" snap-in . Instead, access \"User Accounts\" following the instructions in this link . Note that this does not allow you to add a local user account to multiple groups, which is a problem because you want to remain a Standard User or an Administrator. What's funny is that the first search result I found for how to add the same user to multiple groups got the response that the question was too complicated for the forum.","title":"Adding local user accounts to the docker users group on Windows 10"},{"location":"Adding-local-user-accounts-to-the-docker-users-group-on-Windows-10/#for-windows-10-editions-other-than-home","text":"The instructions with images are found at this link . The steps are as follows: 1. Search and open \"Computer Management.\" 2. Go to \"Local Users and Groups.\" 3. Go to \"Users\" and add yourself to the \"docker-users\" group.","title":"For Windows 10 editions other than Home:"},{"location":"Adding-local-user-accounts-to-the-docker-users-group-on-Windows-10/#for-windows-10-home-edition","text":"Open command prompt as an administrator. This is called elevated command prompt. Run the following command, replacing USER with your own: net localgroup docker-users USER /add You're good to go!","title":"For Windows 10 Home edition"},{"location":"Adding-local-user-accounts-to-the-docker-users-group-on-Windows-10/#extra-notes","text":"If you're curious as to why the instructions are different for Windows 10 Home, it's because Windows 10 Home is the only edition of Windows 10 without the \"Local Users and Groups\" snap-in . Instead, access \"User Accounts\" following the instructions in this link . Note that this does not allow you to add a local user account to multiple groups, which is a problem because you want to remain a Standard User or an Administrator. What's funny is that the first search result I found for how to add the same user to multiple groups got the response that the question was too complicated for the forum.","title":"Extra notes"},{"location":"Agendas/","text":"2019 December-2019 November-2019","title":"Agendas"},{"location":"Agendas/#2019","text":"December-2019 November-2019","title":"2019"},{"location":"Copywriter/","text":"Review existing copy on the Hack for LA website . Review the Site Redesign Planning Board and identify an actionable backlog item, if available. Review Hack for LA document templates to familiarize yourself with existing collateral and identify opportunities to generate new assets of value. Communicate with PM your interest in being assigned a task. Review the Project Terminology .","title":"Copywriter"},{"location":"Data-Scientist/","text":"Read the development Readme and set up your development environment. Review the Software Lifecycle Diagram . Review our success metrics . Review the Site Redesign Planning Board and identify an actionable backlog item. Become acquainted with the project's analytics tools . Communicate with PM your interest in being assigned a task. Review the Project Terminology .","title":"Data Scientist"},{"location":"December-2019-Agenda/","text":"Agenda: Notes: Next Steps:","title":"December 2019 Agenda"},{"location":"December-2019-Agenda/#agenda","text":"","title":"Agenda:"},{"location":"December-2019-Agenda/#notes","text":"","title":"Notes:"},{"location":"December-2019-Agenda/#next-steps","text":"","title":"Next Steps:"},{"location":"Digital-Marketing-Overview/","text":"Get Acquainted with Google Analytics A digital marketer must answer 3 questions: 1) Audience \u2014 Who are your customers? Age & Gender Interests: Apply to all Google Ads platforms, including Search, Display, YouTube, and Gmail (Affinity categories, in-market segments) 2) Acquisition \u2014 Where are they coming from? All traffic Channels - Understand types of traffic Source/Medium - Identify top traffic sources 3) Conversions \u2014 How do you get more? Goal URLs: Compare site goal performance","title":"Digital Marketing Overview"},{"location":"Digital-Marketing-Overview/#get-acquainted-with-google-analytics","text":"A digital marketer must answer 3 questions: 1) Audience \u2014 Who are your customers? Age & Gender Interests: Apply to all Google Ads platforms, including Search, Display, YouTube, and Gmail (Affinity categories, in-market segments) 2) Acquisition \u2014 Where are they coming from? All traffic Channels - Understand types of traffic Source/Medium - Identify top traffic sources 3) Conversions \u2014 How do you get more? Goal URLs: Compare site goal performance","title":"Get Acquainted with Google Analytics"},{"location":"Glossary/","text":"Project management The practice of initiating, planning, executing, controlling, and closing the work of a team to achieve specific goals and meet specific success criteria at the specified time. [3] agile An iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches. Instead of betting everything on a \"big bang\" launch, an agile team delivers work in small, but consumable, increments. [1][2] kanban A popular framework used to implement agile software development. Work items are represented visually on a kanban board, allowing team members to see the state of every piece of work at any time. [2] scrum A software development framework that describes a set of meetings, tools, and roles that work in concert to help teams structure and manage their work. Scrum encourages teams to learn through experiences, self-organize while working on a problem, and reflect on their wins and losses to continuously improve. [2] user-centered design User-centered design (UCD) or user-driven development (UDD) is a framework of processes (not restricted to interfaces or technologies) in which usability goals, user characteristics, environment, tasks and workflow of a product, service or process are given extensive attention at each stage of the design process. [4] Scrum methodology acceptance criteria Predefined conditions that a software product must satisfy in order to mark a user story complete. [1][2] epic A large body of work that can be broken down into a number of smaller user stories. [2] sprint Also known as an iteration . A short period in which the development team implements and delivers a discrete and potentially shippable application increment (e.g. a working milestone version). [2] user story Development tasks often expressed as \u201cpersona + need + purpose.\" [2] velocity The average amount of work a scrum team completes during a sprint. This can be measured in either \"story points\" or number of issues. [2] References Altexsoft blog. https://www.altexsoft.com/blog/. Retrieved 1 December 2019. Atlassian Agile Coach. https://www.atlassian.com/agile. Retrieved 1 December 2019. Scrum (software development). Wikipedia. https://en.wikipedia.org/wiki/Scrum_(software_development). Retrieved 1 December 2019. User-centered design (UCD) or user-driven development (UDD). Wikipedia. https://en.wikipedia.org/wiki/User-centered_design. Retrieved 23 March 2020.","title":"Glossary"},{"location":"Glossary/#references","text":"Altexsoft blog. https://www.altexsoft.com/blog/. Retrieved 1 December 2019. Atlassian Agile Coach. https://www.atlassian.com/agile. Retrieved 1 December 2019. Scrum (software development). Wikipedia. https://en.wikipedia.org/wiki/Scrum_(software_development). Retrieved 1 December 2019. User-centered design (UCD) or user-driven development (UDD). Wikipedia. https://en.wikipedia.org/wiki/User-centered_design. Retrieved 23 March 2020.","title":"References"},{"location":"Guide-to-the-Project-Layout-File/","text":"## Contents Visible Layout Hero Image Project Status Project Links Tools and Technologies Open Roles Getting Started Button Getting Started Panel Project Leadership Project Contributors Resource Card JavaScript Code Fetching Correct Project Adding Languages Constructing Team Card Getting Started Drop Down Call to Action Message content markdownify - page.hero-image looping thru that for leadership - variables defined in markdown for text underneath front matter, and content of blog post - markdownify would take all text outside of front matter and dump it into page -take it out and test it to see if it braks or not, if everythingis ok - delete/remove it Visible To include a page on the site's project listing, your card should contain the following line. If you do not want the project to be listed, change visible to \"false\". --- visible: true --- Layout The project layout incorporates the default layout, which contains the head, header, and footer elements. --- layout: default --- Hero Image If a hero-image for the project is available - the project markdown file will, for example, include: which will be displayed on top of the project page. If the image is not available, an image of a color block will serve as its placeholder. When compiled, the color block will be shown as a gradient because a gradient effect has been styled into the project layout via _project-page.scss . A note about image naming conventions: In the assets\\images\\projects folder, you'll see the images for all the projects. Images for the project cards are named after the project itself, images to be displayed on the project page will have a -hero appended to the project name. Use - instead of spaces for projects with longer names: for example, food-oasis . {% if page.image-hero %} <header style='background: url({{ page.image-hero }}) center center no-repeat;' class='project-hero'> {% else %} <header style='background: url(/assets/images/hero/hacknight-women.jpg) center center no-repeat;' class='project-hero'> {% endif %} <h1 class='hero-inner'>{{ page.title }}</h1> </header> <div class='content-section project-home-page'> <!--Project Description Card--> <div id='project-description-card' class='project-page-card' style='padding-bottom: 19px;'> <h4 style='color:#333'>Project Overview</h4> <!--Project Details--> <div class='project-page-description'> Project Status Depending on the project status, the filter will change the status background-color according to the CSS in _sass\\components_projects.scss using the classes status-indicator and status-text (with 'text' being replaced with the status from the front matter declared in the markdown file). <!--Project Properties--> <div class='description-grid-item'> {% if page.status %} <div> <p style='display:inline-block'><strong>Status: </strong></p> <div style='display:inline-block; float:none' class='status-indicator {{ \"status-\" | append: page.status }}'> <h5 class='status-text'>{{ page.status }}</h5> </div> </div> {% endif %} {% if page.partner %}<p><strong>Partner: </strong>{{ page.partner }}</p>{% endif %} {% if page.location %}<p><strong>Location: </strong>{{ page.location }}</p>{% endif %} Project Links The following code is for placing project links. First, we'll count the number of links listed in the markdown file. For lists over the length of 1, we'll add commas to the list, using the counter to keep our count and as to avoid adding a comma after the last link. This list is prioritizing Github and Site links for the Project Overview section of the project page. All other links are placed into the Resource section at the bottom of the project page. <!-- Links Logic to filter prioritized links and to correct comma placement --> {% if page.links %} {% assign counter = 0 %} {% for item in page.links %} {% if item.name == 'GitHub' or item.name == 'Test Site' or item.name == 'Demo Site' or item.name == 'Site' %} {% assign counter = counter | plus:1 %} {% endif %} {% endfor %} {% if counter > 0 %} <p> <strong>Links: </strong> {% for item in page.links %} {% if item.name == 'GitHub' or item.name == 'Test Site' or item.name == 'Demo Site' or item.name == 'Site' %} {% if counter > 1 %} <a target=\"_blank\" href='{{ item.url }}'> {{ item.name }}</a>, {% assign counter = counter | minus:1 %} {% elsif counter <= 1 %} <a target=\"_blank\" href='{{ item.url }}'> {{ item.name }}</a> {% endif %} {% endif %} {% endfor %} </p> {% endif %} {% endif %} Tools and Technologies The following code compiles the lists of the tools and technologies used in the project. As tools are in a string-list format in the front matter, there is no need for a loop. The technologies have to be looped through as they in the markdown list format, and an if condition is needed because not all projects have listed their technologies used. Lastly, languages are pulled from Github instead of the project markdown file. Therefore, a script for Adding Languages is used instead. {% if page.tools %}<p><strong>Tools: </strong>{{ page.tools }}</p>{% endif %} <p id='languages'><strong>Languages: </strong></p> {% if page.technologies %} <p id='technologies'><strong>Technologies: </strong> {% for tech in page.technologies %} {{ tech }}{% if forloop.last == false %},{% endif %} {% endfor %} </p> {% endif %} </div> Open Roles Description and open roles for the project, with open roles structured as list items. This list is pulling from the looking: front matter of the project markdown file. <!--Project Summary and Getting Started Button--> <div class='description-grid-item'> <p>{{page.description}}</p> {% if page.status == \"Completed\" and page.completed-contact %} <p>If you would like to talk to us about this completed project, please reach out to <a href=\"mailto:{{ page.completed-contact }}?subject=Question%20about%20{{ page.title }}\">{{ page.completed-contact }}</a></p> {% elsif page.status == \"Completed\" %} <p>If you would like to talk to us about this completed project, please reach out to <a href=\"mailto:team@hackforla.org?subject=Question%20about%20{{ page.title }}\">team@hackforla.org</a></p> {% elsif page.looking %} <p class='open-roles'><strong>Open roles:</strong></p> <ul id='open-roles-list'> {% for item in page.looking %} <li><p class='role-paragraph'>{% if item.skill %}{{ item.skill }}{% endif %}</p></li> {% endfor %} </ul> {% endif %} </div> </div> Getting Started Button Getting started accordion panel button. <div class=\"getting-started\"> <p style='margin-bottom:0px; white-space: nowrap;'>Getting Started</p> <button onClick='gettingStarted()' class='getting-started-button'> {% include svg/_ionicons_svg_ios-arrow-down.svg %} </button> </div> </div> Getting Started Panel When the getting started button is clicked, the panel will open to show this section. This section is using the resource-card.html from the _includes folder to create the layout. If the project has a Wiki and/or Readme, those files will appear on the page with an icon and link. If neither of those are defined in links in the project markdown file, the page will display a message: \"Looks like this project doesn't have their own Getting Started guide.\" <!--Getting Started Card--> <div id=\"getting-started-section\" class='project-page-card'> <ul class=\"resource-list unstyled-list\"> <!-- Hfla Start Guide --> {%- include resource-card.html name='Getting Started' url='https://github.com/hackforla/getting-started' -%} {% assign hasGettingStarted = false %} <!-- Check for Project Wiki --> {% for item in page.links %} {% if item.name == 'Wiki' %} {% assign hasGettingStarted = true %} {%- include resource-card.html name=item.name url=item.url image=page.image -%} {% endif %} {% endfor %} <!-- Check for Project Readme --> {% for item in page.links %} {% if item.name == 'Readme' %} {% assign hasGettingStarted = true %} {%- include resource-card.html name=item.name url=item.url image=page.image -%} {% endif %} {% endfor %} {% if hasGettingStarted == false %} <div id='help-getting-started'> <p style='margin: 0px 15px 13px 15px;'>Looks like this project doesn't have their own Getting Started guide.</p> <button onClick='helpMakeGuide()' class=\"btn btn-primary help-make-button\" style='margin: 0 0 0 0;'>Help Make One!</button onClick=''> </div> {% endif %} </ul> </div> Project Leadership Project leadership is also defined in the project markdown file, the code below loops through the leadership list and outputs the cards, in the case the leadership is not listed, a message will be outputted instead. Most project leaders will have links for their Github and Slack direct message, but in some cases, only their LinkedIn is provided. The code below checks for LinkedIn profiles for completed projects first, before it checks for the users' Github links. The rule for leadership cards is to link an individual's name to their Slack or LinkedIn, and for their photo/Github avatar to link to their Github or nothing (if clicked, a new tab will open to the project page). <!-- Project Team Card --> <div id='project-team-card' class='project-page-card'> <h4 style='color:#333'>Project Leadership</h4> {% if page.leadership %} <div class='resource-list'> {% for item in page.leadership %} <div class='leader-card'> <a href='{{ item.links.github }}' target='_blank' title='GitHub Profile'><img class='leader-img' src='{{ item.picture }}'/></a> <div class='leader-description'> {% if page.status == \"Completed\" and item.links.linkedin %} <p style='margin-block-end: 0.25em;'><strong>Name: </strong><a href='{{ item.links.linkedin }}' target='_blank' title='Linkedin Profile'>{{ item.name }}</a></p> {% elsif page.status == \"Completed\" %} <p style='margin-block-end: 0.25em;'><strong>Name: </strong><a href='{{ item.links.github }}' target='_blank' title='GitHub Profile'>{{ item.name }}</a></p> {% else %} <p style='margin-block-end: 0.25em;'><strong>Name: </strong><a href='{{ item.links.slack }}' target='_blank' title='Slack Direct Message'>{{ item.name }}</a></p> {% endif %} <p style='margin-block-end: 0.25em;'><strong>Role: </strong>{{ item.role }}</p> </div> </div> {% endfor %} </div> {% else %} <div class='empty-content-message'> <p>Looks like this project has not revealed specific leadership roles yet!</p> </div> {% endif %} Project Contributors The Contributors section with volunteers' Github avatar/profile picture and links are populated through DOM manipulation with JavaScript in the Constructing Team Card below. The script is using data being pulled through our github-actions with the data being stored in _data/github-data.json with objects of each project and their identification number, name, languages, url, and contributor list. The contributors' data includes their Github id number, github url, avator url, and a count of their contributions. <h4 id='contributor-header'style='color:#333'>Contributors</h4> <div id='contributors-list' class='resource-list'></div> </div> Resource Card The code below populates the Resource card, using resource-card.html from the _includes to create icons and links to the project's links (i.e. Github, Wiki, Slack, Project website, etc.). <!--Project Resources Card--> <div class='project-page-card'> <h4 style='color:#333'>Resources</h4> <ul class=\"resource-list unstyled-list\"> {%- for item in page.links -%} {% if item.name == 'Readme' or item.name == 'Wiki' %} {%- include resource-card.html name=item.name url=item.url image=page.image -%} {% else %} {%- include resource-card.html name=item.name url=item.url -%} {% endif %} {%- endfor -%} </ul> </div> </div> {{ content | markdownify }} Return to Contents JavaScript Code Fetching Correct Project The script is using data being pulled through our github-actions with the data being stored in _data/github-data.json with objects of each project and their identification number, name, languages, url, and contributor list. The contributors' data includes their Github id number, github url, avator url, and a count of their contributions. This script fetches the identification number and compares it against to markdown file to make sure it's correct. Within github\\workflows\\main.yml , you'll see that the JSON file is updated every day at 3am Pacific time. <!--Script for fetching the correct project--> <script> {% assign projects = site.data.github-data | jsonify %} let projects = {{ projects }}; let projectId = '{{ page.identification }}'; // Search for correct project let project = null; for(item of projects){ let itemId = item.id.toString(); if(itemId == projectId){ project = item; break; } } </script> Adding Languages Using the project variable defined in the Fetching Correct Project script, we'll loop through the document for the languages used in the project and output them. <!--Script for adding languages to \"Languages\" Section--> <script> let languagesSection = document.getElementById('languages'); if(project != null && project.languages.data.length > 0){ let languages = project.languages.data.join(', '); let languagesParagraph = document.createElement('p'); languagesParagraph.style.display = 'inline'; let languagesText = document.createTextNode(languages); languagesParagraph.appendChild(languagesText); languagesSection.appendChild(languagesParagraph); } else { languagesSection.remove(); } </script> Constructing Team Card Again, using the project variable defined in the Fetching Correct Project script, we're looping through the contributors list to create miniature cards with their links and Github avatars to append to the project page. <!--Script for constructing Team Card--> <script> let contributors = document.getElementById('contributors-list'); if(project != null){ for(contributor of project.contributors.data){ let contributorDiv = document.createElement('div'); contributorDiv.classList.add('contributor-div'); let contributorProfile = document.createElement('a'); contributorProfile.classList.add('contributor-link'); contributorProfile.setAttribute('href', contributor.github_url); contributorProfile.setAttribute('target', '_blank'); let contributorUrl = contributor.github_url.split('/'); let contributorName = contributorUrl.pop(); contributorProfile.setAttribute('title', contributorName); let contributorImg = document.createElement('img'); contributorImg.style['border-radius'] = '12px'; contributorImg.setAttribute('src', contributor.avatar_url); contributorProfile.appendChild(contributorImg); contributorDiv.appendChild(contributorProfile); contributors.appendChild(contributorDiv); } } else { let messageDiv = document.createElement('div'); messageDiv.classList.add('empty-content-message'); let messageText = document.createElement('p'); messageText.appendChild(document.createTextNode('Looks like this project has not connected a GitHub repository yet!')); messageDiv.appendChild(messageText); contributors.parentNode.appendChild(messageDiv); contributors.parentNode.removeChild(contributors); } </script> Getting Started Drop Down Creates the 'Getting Started' drop down button, and adjusting its styling. <!--Script for Getting Started drop down functionality--> <script> let dropDownOpen = false; function gettingStarted(){ if(!dropDownOpen){ dropDownOpen = true; let gettingStartedButton = document.getElementsByClassName('getting-started-button')[0]; gettingStartedButton.style.transform = 'rotate(180deg)'; let gettingStartedCard = document.getElementById('getting-started-section'); let maxHeight = gettingStartedCard.children[0].offsetHeight * 1.5; // Adding pixels for good measure and pop up message gettingStartedCard.style['max-height'] = maxHeight + 'px'; gettingStartedCard.style.padding = '30px 30px'; } else { dropDownOpen = false; let gettingStartedButton = document.getElementsByClassName('getting-started-button')[0]; gettingStartedButton.style.transform = 'rotate(0deg)'; let gettingStartedCard = document.getElementById('getting-started-section'); gettingStartedCard.style['max-height'] = '0px'; gettingStartedCard.style.padding = '0px 30px'; } } </script> Call to Action Message When the 'Help Make One!' button is clicked, a message will pop out. This code allows the output of this message when a project does not have links for its Getting Started section. <!--Script for constructing Getting Started call to action message--> <script> let helpGettingStarted = document.getElementById('help-getting-started'); let textDiv = document.createElement('div'); textDiv.setAttribute('id', 'help-make-text-section'); let hflaSlack = document.createElement('a'); hflaSlack.setAttribute('href', 'https://hackforla.slack.com/archives/C4UM52W93'); hflaSlack.setAttribute('target', '_blank'); let hflaSlackText = document.createTextNode('Hack for LA'); hflaSlack.appendChild(hflaSlackText); let projectSlack = document.createElement('a'); {% for item in page.links %} {% if item.name == 'Slack' %} projectSlack.setAttribute('href', '{{ item.url }}') projectSlack.setAttribute('target', '_blank'); {% endif %} {% endfor %} let projectSlackText = document.createTextNode('our'); projectSlack.appendChild(projectSlackText); let message = document.createElement('p'); message.style.width = '200px'; let text1 = document.createTextNode('Once you are on the '); let text2 = document.createTextNode(' slack channel, please post a note in '); let text3 = document.createTextNode(' channel indicating your interest.'); message.appendChild(text1); message.appendChild(hflaSlack); message.appendChild(text2); message.appendChild(projectSlack); message.appendChild(text3); textDiv.appendChild(message); helpGettingStarted.insertAdjacentElement('afterend', textDiv); function helpMakeGuide(){ let textDiv = document.getElementById('help-make-text-section'); textDiv.style['min-width'] = '225px'; textDiv.style.padding = '35px 15px'; } </script> Return to Contents","title":"Guide to the Project Layout File"},{"location":"Guide-to-the-Project-Layout-File/#contents","text":"Visible Layout Hero Image Project Status Project Links Tools and Technologies Open Roles Getting Started Button Getting Started Panel Project Leadership Project Contributors Resource Card JavaScript Code Fetching Correct Project Adding Languages Constructing Team Card Getting Started Drop Down Call to Action Message content markdownify - page.hero-image looping thru that for leadership - variables defined in markdown for text underneath front matter, and content of blog post - markdownify would take all text outside of front matter and dump it into page -take it out and test it to see if it braks or not, if everythingis ok - delete/remove it","title":"## Contents"},{"location":"Guide-to-the-Project-Layout-File/#visible","text":"To include a page on the site's project listing, your card should contain the following line. If you do not want the project to be listed, change visible to \"false\". --- visible: true ---","title":"Visible"},{"location":"Guide-to-the-Project-Layout-File/#layout","text":"The project layout incorporates the default layout, which contains the head, header, and footer elements. --- layout: default ---","title":"Layout"},{"location":"Guide-to-the-Project-Layout-File/#hero-image","text":"If a hero-image for the project is available - the project markdown file will, for example, include: which will be displayed on top of the project page. If the image is not available, an image of a color block will serve as its placeholder. When compiled, the color block will be shown as a gradient because a gradient effect has been styled into the project layout via _project-page.scss . A note about image naming conventions: In the assets\\images\\projects folder, you'll see the images for all the projects. Images for the project cards are named after the project itself, images to be displayed on the project page will have a -hero appended to the project name. Use - instead of spaces for projects with longer names: for example, food-oasis . {% if page.image-hero %} <header style='background: url({{ page.image-hero }}) center center no-repeat;' class='project-hero'> {% else %} <header style='background: url(/assets/images/hero/hacknight-women.jpg) center center no-repeat;' class='project-hero'> {% endif %} <h1 class='hero-inner'>{{ page.title }}</h1> </header> <div class='content-section project-home-page'> <!--Project Description Card--> <div id='project-description-card' class='project-page-card' style='padding-bottom: 19px;'> <h4 style='color:#333'>Project Overview</h4> <!--Project Details--> <div class='project-page-description'>","title":"Hero Image"},{"location":"Guide-to-the-Project-Layout-File/#project-status","text":"Depending on the project status, the filter will change the status background-color according to the CSS in _sass\\components_projects.scss using the classes status-indicator and status-text (with 'text' being replaced with the status from the front matter declared in the markdown file). <!--Project Properties--> <div class='description-grid-item'> {% if page.status %} <div> <p style='display:inline-block'><strong>Status: </strong></p> <div style='display:inline-block; float:none' class='status-indicator {{ \"status-\" | append: page.status }}'> <h5 class='status-text'>{{ page.status }}</h5> </div> </div> {% endif %} {% if page.partner %}<p><strong>Partner: </strong>{{ page.partner }}</p>{% endif %} {% if page.location %}<p><strong>Location: </strong>{{ page.location }}</p>{% endif %}","title":"Project Status"},{"location":"Guide-to-the-Project-Layout-File/#project-links","text":"The following code is for placing project links. First, we'll count the number of links listed in the markdown file. For lists over the length of 1, we'll add commas to the list, using the counter to keep our count and as to avoid adding a comma after the last link. This list is prioritizing Github and Site links for the Project Overview section of the project page. All other links are placed into the Resource section at the bottom of the project page. <!-- Links Logic to filter prioritized links and to correct comma placement --> {% if page.links %} {% assign counter = 0 %} {% for item in page.links %} {% if item.name == 'GitHub' or item.name == 'Test Site' or item.name == 'Demo Site' or item.name == 'Site' %} {% assign counter = counter | plus:1 %} {% endif %} {% endfor %} {% if counter > 0 %} <p> <strong>Links: </strong> {% for item in page.links %} {% if item.name == 'GitHub' or item.name == 'Test Site' or item.name == 'Demo Site' or item.name == 'Site' %} {% if counter > 1 %} <a target=\"_blank\" href='{{ item.url }}'> {{ item.name }}</a>, {% assign counter = counter | minus:1 %} {% elsif counter <= 1 %} <a target=\"_blank\" href='{{ item.url }}'> {{ item.name }}</a> {% endif %} {% endif %} {% endfor %} </p> {% endif %} {% endif %}","title":"Project Links"},{"location":"Guide-to-the-Project-Layout-File/#tools-and-technologies","text":"The following code compiles the lists of the tools and technologies used in the project. As tools are in a string-list format in the front matter, there is no need for a loop. The technologies have to be looped through as they in the markdown list format, and an if condition is needed because not all projects have listed their technologies used. Lastly, languages are pulled from Github instead of the project markdown file. Therefore, a script for Adding Languages is used instead. {% if page.tools %}<p><strong>Tools: </strong>{{ page.tools }}</p>{% endif %} <p id='languages'><strong>Languages: </strong></p> {% if page.technologies %} <p id='technologies'><strong>Technologies: </strong> {% for tech in page.technologies %} {{ tech }}{% if forloop.last == false %},{% endif %} {% endfor %} </p> {% endif %} </div>","title":"Tools and Technologies"},{"location":"Guide-to-the-Project-Layout-File/#open-roles","text":"Description and open roles for the project, with open roles structured as list items. This list is pulling from the looking: front matter of the project markdown file. <!--Project Summary and Getting Started Button--> <div class='description-grid-item'> <p>{{page.description}}</p> {% if page.status == \"Completed\" and page.completed-contact %} <p>If you would like to talk to us about this completed project, please reach out to <a href=\"mailto:{{ page.completed-contact }}?subject=Question%20about%20{{ page.title }}\">{{ page.completed-contact }}</a></p> {% elsif page.status == \"Completed\" %} <p>If you would like to talk to us about this completed project, please reach out to <a href=\"mailto:team@hackforla.org?subject=Question%20about%20{{ page.title }}\">team@hackforla.org</a></p> {% elsif page.looking %} <p class='open-roles'><strong>Open roles:</strong></p> <ul id='open-roles-list'> {% for item in page.looking %} <li><p class='role-paragraph'>{% if item.skill %}{{ item.skill }}{% endif %}</p></li> {% endfor %} </ul> {% endif %} </div> </div>","title":"Open Roles"},{"location":"Guide-to-the-Project-Layout-File/#getting-started-button","text":"Getting started accordion panel button. <div class=\"getting-started\"> <p style='margin-bottom:0px; white-space: nowrap;'>Getting Started</p> <button onClick='gettingStarted()' class='getting-started-button'> {% include svg/_ionicons_svg_ios-arrow-down.svg %} </button> </div> </div>","title":"Getting Started Button"},{"location":"Guide-to-the-Project-Layout-File/#getting-started-panel","text":"When the getting started button is clicked, the panel will open to show this section. This section is using the resource-card.html from the _includes folder to create the layout. If the project has a Wiki and/or Readme, those files will appear on the page with an icon and link. If neither of those are defined in links in the project markdown file, the page will display a message: \"Looks like this project doesn't have their own Getting Started guide.\" <!--Getting Started Card--> <div id=\"getting-started-section\" class='project-page-card'> <ul class=\"resource-list unstyled-list\"> <!-- Hfla Start Guide --> {%- include resource-card.html name='Getting Started' url='https://github.com/hackforla/getting-started' -%} {% assign hasGettingStarted = false %} <!-- Check for Project Wiki --> {% for item in page.links %} {% if item.name == 'Wiki' %} {% assign hasGettingStarted = true %} {%- include resource-card.html name=item.name url=item.url image=page.image -%} {% endif %} {% endfor %} <!-- Check for Project Readme --> {% for item in page.links %} {% if item.name == 'Readme' %} {% assign hasGettingStarted = true %} {%- include resource-card.html name=item.name url=item.url image=page.image -%} {% endif %} {% endfor %} {% if hasGettingStarted == false %} <div id='help-getting-started'> <p style='margin: 0px 15px 13px 15px;'>Looks like this project doesn't have their own Getting Started guide.</p> <button onClick='helpMakeGuide()' class=\"btn btn-primary help-make-button\" style='margin: 0 0 0 0;'>Help Make One!</button onClick=''> </div> {% endif %} </ul> </div>","title":"Getting Started Panel"},{"location":"Guide-to-the-Project-Layout-File/#project-leadership","text":"Project leadership is also defined in the project markdown file, the code below loops through the leadership list and outputs the cards, in the case the leadership is not listed, a message will be outputted instead. Most project leaders will have links for their Github and Slack direct message, but in some cases, only their LinkedIn is provided. The code below checks for LinkedIn profiles for completed projects first, before it checks for the users' Github links. The rule for leadership cards is to link an individual's name to their Slack or LinkedIn, and for their photo/Github avatar to link to their Github or nothing (if clicked, a new tab will open to the project page). <!-- Project Team Card --> <div id='project-team-card' class='project-page-card'> <h4 style='color:#333'>Project Leadership</h4> {% if page.leadership %} <div class='resource-list'> {% for item in page.leadership %} <div class='leader-card'> <a href='{{ item.links.github }}' target='_blank' title='GitHub Profile'><img class='leader-img' src='{{ item.picture }}'/></a> <div class='leader-description'> {% if page.status == \"Completed\" and item.links.linkedin %} <p style='margin-block-end: 0.25em;'><strong>Name: </strong><a href='{{ item.links.linkedin }}' target='_blank' title='Linkedin Profile'>{{ item.name }}</a></p> {% elsif page.status == \"Completed\" %} <p style='margin-block-end: 0.25em;'><strong>Name: </strong><a href='{{ item.links.github }}' target='_blank' title='GitHub Profile'>{{ item.name }}</a></p> {% else %} <p style='margin-block-end: 0.25em;'><strong>Name: </strong><a href='{{ item.links.slack }}' target='_blank' title='Slack Direct Message'>{{ item.name }}</a></p> {% endif %} <p style='margin-block-end: 0.25em;'><strong>Role: </strong>{{ item.role }}</p> </div> </div> {% endfor %} </div> {% else %} <div class='empty-content-message'> <p>Looks like this project has not revealed specific leadership roles yet!</p> </div> {% endif %}","title":"Project Leadership"},{"location":"Guide-to-the-Project-Layout-File/#project-contributors","text":"The Contributors section with volunteers' Github avatar/profile picture and links are populated through DOM manipulation with JavaScript in the Constructing Team Card below. The script is using data being pulled through our github-actions with the data being stored in _data/github-data.json with objects of each project and their identification number, name, languages, url, and contributor list. The contributors' data includes their Github id number, github url, avator url, and a count of their contributions. <h4 id='contributor-header'style='color:#333'>Contributors</h4> <div id='contributors-list' class='resource-list'></div> </div>","title":"Project Contributors"},{"location":"Guide-to-the-Project-Layout-File/#resource-card","text":"The code below populates the Resource card, using resource-card.html from the _includes to create icons and links to the project's links (i.e. Github, Wiki, Slack, Project website, etc.). <!--Project Resources Card--> <div class='project-page-card'> <h4 style='color:#333'>Resources</h4> <ul class=\"resource-list unstyled-list\"> {%- for item in page.links -%} {% if item.name == 'Readme' or item.name == 'Wiki' %} {%- include resource-card.html name=item.name url=item.url image=page.image -%} {% else %} {%- include resource-card.html name=item.name url=item.url -%} {% endif %} {%- endfor -%} </ul> </div> </div> {{ content | markdownify }} Return to Contents","title":"Resource Card"},{"location":"Guide-to-the-Project-Layout-File/#javascript-code","text":"","title":"JavaScript Code"},{"location":"Guide-to-the-Project-Layout-File/#fetching-correct-project","text":"The script is using data being pulled through our github-actions with the data being stored in _data/github-data.json with objects of each project and their identification number, name, languages, url, and contributor list. The contributors' data includes their Github id number, github url, avator url, and a count of their contributions. This script fetches the identification number and compares it against to markdown file to make sure it's correct. Within github\\workflows\\main.yml , you'll see that the JSON file is updated every day at 3am Pacific time. <!--Script for fetching the correct project--> <script> {% assign projects = site.data.github-data | jsonify %} let projects = {{ projects }}; let projectId = '{{ page.identification }}'; // Search for correct project let project = null; for(item of projects){ let itemId = item.id.toString(); if(itemId == projectId){ project = item; break; } } </script>","title":"Fetching Correct Project"},{"location":"Guide-to-the-Project-Layout-File/#adding-languages","text":"Using the project variable defined in the Fetching Correct Project script, we'll loop through the document for the languages used in the project and output them. <!--Script for adding languages to \"Languages\" Section--> <script> let languagesSection = document.getElementById('languages'); if(project != null && project.languages.data.length > 0){ let languages = project.languages.data.join(', '); let languagesParagraph = document.createElement('p'); languagesParagraph.style.display = 'inline'; let languagesText = document.createTextNode(languages); languagesParagraph.appendChild(languagesText); languagesSection.appendChild(languagesParagraph); } else { languagesSection.remove(); } </script>","title":"Adding Languages"},{"location":"Guide-to-the-Project-Layout-File/#constructing-team-card","text":"Again, using the project variable defined in the Fetching Correct Project script, we're looping through the contributors list to create miniature cards with their links and Github avatars to append to the project page. <!--Script for constructing Team Card--> <script> let contributors = document.getElementById('contributors-list'); if(project != null){ for(contributor of project.contributors.data){ let contributorDiv = document.createElement('div'); contributorDiv.classList.add('contributor-div'); let contributorProfile = document.createElement('a'); contributorProfile.classList.add('contributor-link'); contributorProfile.setAttribute('href', contributor.github_url); contributorProfile.setAttribute('target', '_blank'); let contributorUrl = contributor.github_url.split('/'); let contributorName = contributorUrl.pop(); contributorProfile.setAttribute('title', contributorName); let contributorImg = document.createElement('img'); contributorImg.style['border-radius'] = '12px'; contributorImg.setAttribute('src', contributor.avatar_url); contributorProfile.appendChild(contributorImg); contributorDiv.appendChild(contributorProfile); contributors.appendChild(contributorDiv); } } else { let messageDiv = document.createElement('div'); messageDiv.classList.add('empty-content-message'); let messageText = document.createElement('p'); messageText.appendChild(document.createTextNode('Looks like this project has not connected a GitHub repository yet!')); messageDiv.appendChild(messageText); contributors.parentNode.appendChild(messageDiv); contributors.parentNode.removeChild(contributors); } </script>","title":"Constructing Team Card"},{"location":"Guide-to-the-Project-Layout-File/#getting-started-drop-down","text":"Creates the 'Getting Started' drop down button, and adjusting its styling. <!--Script for Getting Started drop down functionality--> <script> let dropDownOpen = false; function gettingStarted(){ if(!dropDownOpen){ dropDownOpen = true; let gettingStartedButton = document.getElementsByClassName('getting-started-button')[0]; gettingStartedButton.style.transform = 'rotate(180deg)'; let gettingStartedCard = document.getElementById('getting-started-section'); let maxHeight = gettingStartedCard.children[0].offsetHeight * 1.5; // Adding pixels for good measure and pop up message gettingStartedCard.style['max-height'] = maxHeight + 'px'; gettingStartedCard.style.padding = '30px 30px'; } else { dropDownOpen = false; let gettingStartedButton = document.getElementsByClassName('getting-started-button')[0]; gettingStartedButton.style.transform = 'rotate(0deg)'; let gettingStartedCard = document.getElementById('getting-started-section'); gettingStartedCard.style['max-height'] = '0px'; gettingStartedCard.style.padding = '0px 30px'; } } </script>","title":"Getting Started Drop Down"},{"location":"Guide-to-the-Project-Layout-File/#call-to-action-message","text":"When the 'Help Make One!' button is clicked, a message will pop out. This code allows the output of this message when a project does not have links for its Getting Started section. <!--Script for constructing Getting Started call to action message--> <script> let helpGettingStarted = document.getElementById('help-getting-started'); let textDiv = document.createElement('div'); textDiv.setAttribute('id', 'help-make-text-section'); let hflaSlack = document.createElement('a'); hflaSlack.setAttribute('href', 'https://hackforla.slack.com/archives/C4UM52W93'); hflaSlack.setAttribute('target', '_blank'); let hflaSlackText = document.createTextNode('Hack for LA'); hflaSlack.appendChild(hflaSlackText); let projectSlack = document.createElement('a'); {% for item in page.links %} {% if item.name == 'Slack' %} projectSlack.setAttribute('href', '{{ item.url }}') projectSlack.setAttribute('target', '_blank'); {% endif %} {% endfor %} let projectSlackText = document.createTextNode('our'); projectSlack.appendChild(projectSlackText); let message = document.createElement('p'); message.style.width = '200px'; let text1 = document.createTextNode('Once you are on the '); let text2 = document.createTextNode(' slack channel, please post a note in '); let text3 = document.createTextNode(' channel indicating your interest.'); message.appendChild(text1); message.appendChild(hflaSlack); message.appendChild(text2); message.appendChild(projectSlack); message.appendChild(text3); textDiv.appendChild(message); helpGettingStarted.insertAdjacentElement('afterend', textDiv); function helpMakeGuide(){ let textDiv = document.getElementById('help-make-text-section'); textDiv.style['min-width'] = '225px'; textDiv.style.padding = '35px 15px'; } </script> Return to Contents","title":"Call to Action Message"},{"location":"Hack-for-LA%27s-Site-Architecture/","text":"Hack for LA uses Jekyll , which is a Content Management System (CMS), to generate the HfLA website. In a nutshell, Jekyll takes a bunch of building blocks (HTML, SCSS, and Markdown), and compiles (organizes/combines) these building blocks into the many pages that you see on the site. This guide provides a description of the folders and files in the Hack for LA Website repository and how to work with them. Helpful documentation if you're new to Jekyll or front-end development: * Jekyll - the CMS we're using * Liquid - a templating language used to program Jekyll's HTML output * Markdown - a plain text markup language used in .md files, which Jekyll converts to HTML format * Sass - a stylesheet language used in .scss files, which Jekyll compiles into CSS If you're ready to skip to creating a page: Creating a page for Hack for LA Contents: Repository Overview Configuration Files Jekyll Folders Collections Folders Other Asset Folders Pages Redirections Collections Includes Projects Guide Pages Styling API Endpoints Repository Overview Configuration Files _config.yml : stores site-wide configuration data (variables). This may be: information that Jekyll uses to render our site (for example: whether pages should be accessed as page.html or page/), or information we can use on web pages using Liquid. (See the Jekyll documentation and Liquid reference for more information on Liquid.) For example, title: Hack for LA sets \"Hack for LA\" as the value for the variable title . We can use the Liquid tag {{ site.title }} in our HTML, and Jekyll will output \"Hack for LA\" at that location. _.gitignore : Tells git which files shouldn't be tracked for changes. Most if not all repos have a .gitignore file. You probably won't need to touch it unless you're a lead dev. .dockerignore has a similar function. CNAME : part of the setup that allows the domain name \"hackforla.org\" point to our repo on the GitPages servers. You don't need to touch this. Jekyll Folders Standard Jekyll builds include the following folders: * _site/: When you run Jekyll on your local machine (e.g., using Docker), Jekyll compiles your local code and outputs the website to _site/. Note that _site/ is listed in .gitignore and doesn't exist on the github repo - it's only there for your local viewing. Don't edit code in the site folder; nobody will be able to see your hard work. _data/ : Data files (possible formats include CSV, JSON, XML) can be stored here, and referenced in pages using Liquid via site.data.[filename] Navigation : Contains yml files for the navigation bar for different sections of the home page/individual site pages, as well as social media links. Github-data.json: Contains contributor information for each project, which is automatically pulled from Github. _includes/ : Best place to put HTML building blocks that are repeated on multiple pages. Forms: Includes HTML files for the Contact Us section and a generic sign up form (for email subscriptions). The Contact Us form can be edited to change the look of the section on the home page. Svg: Contains svg files for all the icons used on the site. The remaining HTML files correspond to various HTML snippets seen on every page of the site. When the Liquid tag (i.e. {% include [filename].html %} ) is used in a page file (HTML or Markdown), the content from the included HTML snippet gets pulled in at that point. For more details on each include, see the Includes section below. _layouts/ : A .md or HTML file can call a layout in its front matter (the section between the --- bars). The Layout determines the HTML shell of the page. The content of the .md file (anything after the front matter) gets inserted into the shell at the point where the layout says {{ content }} . We use layouts when we want different pages to have the same overall shell (e.g., header, footer, etc.). default.html : layout used for most pages (including project pages). Includes page elements such as the head, header, and footer, which are pulled from the _includes folder. guide-pages.html : is based on the default layout, and sets additional layout for the header content - such as the hero image, title of the page, description of the page, and a list of contents. (See additional details in the Guide Pages section). project.html : is based on the default layout, and sets additional layout and styling for individual project pages. (See additional details in the Projects section). redirect.html : includes the header and footer HTML files, as well as a message to the user that they are being redirected to an external page. This layout is primarily used for our surveys, which uses Google Forms. Collections Folders Collections are always folders with a preceding underscore (_), and are used to group related content. Usually the items in a collection are .md files. Jekyll is able to process items in a collection iteratively - for example, _projects/ contains an .md file containing information for each H4LA project. With just a few lines of Liquid code on our front page file, we're able to publish information for our 20+ projects. To use a collection, it must be defined in the _config.yml file, under the collections: section. Set output: true if and only if you want Jekyll to generate separate HTML pages for each item within the collection. Output is set to true for the Project pages, because we want each Project to have its own page. See Collections for an explanation of each collection. Other Asset Folders _sass/ : All sass (.scss) files are imported to the main.scss file , which Jekyll processes into a single stylesheet, main.css , which defines all the styles used on the site. _sass/components/ : Because each page has at least some own custom styling, page-specific .scss files live in this subdirectory. For more information on styling, see the Styling section). assets/images/ : All images displayed on the website are stored in this folder. Each project or page has a subfolder for slightly better organization. assets/js/ : Externally-referenced javascripts can live here. One of the files is for the Action Network API, Hack for LA is currently using Action Network to collect and maintain emails for users who are interested in receiving updates and Hack for LA's email subscription. The second file is for the Google Calendar API, which currently redirects to Google Calendars, displaying Hack Night events (which are currently held remotely). Pages All pages that aren't automatically generated within a Collection are organized in this directory. index.html : is where all the sections (i.e. project cards, about, contact, etc.) of the home page are laid out. The files that are \"included\" are from the _includes folder. Note: You'll also notice there is this condition {% assign remote-only = 'true' %} : This is here to filter between two views - one displaying Hack Nights (when we do have in-person meetings), and one without (to accomodate for working remotely due to Covid-19). getting-started.html : The 'Getting Started' button on the home page leads to this page. Thus, this HTML file is using the default layout. The page is divided into four sections/cards, including the introduction, Self Onboarding, Guided Onboarding, and the Once you have joined a team section. project-meetings.html : New Volunteers on the 'Getting Started' page are prompted to check the 'Team Meeting Overview' page. The link will lead to the https://www.hackforla.org/project-meetings page. The Project Meetings page is similar to the 'Getting Started' because they are standalone HTML files that are deployed as their own page (unlike project pages which derive their information from markdown files). Currently, the page is generated through a two-step process to load the meeting times. We're doing this process in two-steps to ensure that the user will always see a page loaded with meeting times. Otherwise, the page may indicate that there are no meetings available as a placeholder message while the page is loading, despite the actual meeting information. 1. The first step in the process is to load the page using a static JSON file, project-meetings-from-vrms.json in the _data folder. The logic {% assign localData = site.data.project-meetings-from-vrms | jsonify %} is pulling information from the static JSON file located in the data folder and converting the JSON into a more usable form, then loading the information onto the page using DOM manipulation, all executed within the schedule function. The next step is to check the information on the loaded page with up-to-date information from VRMS. The data is being pulled from https://www.vrms.io/api/recurringevents . After the data is fetched from the API url, the information inside the new JSON is also converted into a usable form, is checked for differences between the static JSON that was initially loaded onto the page, and any differences that were found will be replaced with the updated VRMS information. Return to Contents Redirections The .md files in this directory are converted to placeholder HTML files, which automatically redirect the viewer to another page. Each file uses the redirect layout (called in the front matter) and includes a custom front matter tag, redirect-to , that specifies the destination URL. The redirect layout then calls this tag using e.g., <a href=\"{{ page.redirect_to }}\"> . The redirect.html layout file also includes code for the Google Analytics API, in order to analyze user interaction with redirected pages. The files using the redirect layout include: * conduct.md : links to Hack for LA's Code of Conduct * donate.md : links to https://www.codeforamerica.org/donate * github.md : Hack for LA's Website Github page * meetup.md : Hack for LA's Meetup page * nationalday.md : Hack for LA's 2019 Day of Civic Hacking * slack.md : Hack for LA's Slack * survey.md files: redirects to various Google Forms surveys * calendar.md : redirects to Hack for LA's Google Calendar with workshops that run outside of regular Hack Nights. These workshops are currently onhold, due to Covid-19, with the possibility of being held remotely. Github-related folders .github/ : holds a couple of files that interact with the Github API and help us keep our repo secure and up to date. github-actions : includes a couple of scripts action.yml : contains front matter for pulling Github API data into a JSON with information relating to project contributors and languages used. get-project-data.js : script to run Github API. package-lock.json : JSON with project contributors and languages used in each project. package.json : JSON for dependencies. Collections help us out by making .md templates in the wiki and linking them here Hack-Nights : Locations for Hack for LA's in-person meetings (before Covid-19). Press : Press releases related to Hack for LA. The markdown files include front matter for the link, title, and source of the article. The press.html in the includes folder uses Liquid to extract the front matter from these markdown files to display this information onto the home page. Projects : Each markdown file represents each project listed on the home page's Projects section. (See additional details in the Projects section). TEMPLATE Sponsors : Hack for LA's Sponsors, and include each sponsor's name, link, logo, and order/position to be displayed on the webpage. Testimonials : Includes Mayor Garcetti's testimonial of Hack for LA's amazing work! :) Guide Pages : Markdown files in the Guide Pages folder represent each guide page. The guide pages are structured using the guide-page.html layout (to consistently format the header content) with additional HTML under the front matter to display content unique to each page. (See additional details in the Guide Pages section). Credits : If you use an image that was generated by someone else, credit them here. TEMPLATE Communities : for Communities of Practice groups. TEMPLATE Return to Contents Includes about.html : Includes description of Hack for LA for the About section on the home page. calendar.html : (Currently disabled) Contains upcoming events. current-projects.html : Populates the project cards' markdown files (from the _projects folder onto the home page in the order of project status and project names. footer.html : Footer navigation bar, includes social media links which are populated from the front matter located in _data\\navigation\\social.yml . hack-nights.html : (Currently disabled) Displays weekly Hack Nights information. Hack Night location and other information are populated from the _hack-nights folder. head.html : Includes page title and API scripts for Google Analytics and Hotjar. Google Analytics is the primary analysis tool, but our legacy tool, Hotjar provides us heatmaps of the Home page and the Getting Started page. header.html : Includes Hack for LA's logo, navigation bar, main-nav.html and social media links/icons ( social.html ). hero.html : Introduction to Hack for LA on the home page. home-getting-started.html : 'Getting Started' button linking to the Getting Started page. There are two of these buttons, one located beneath the hero introductory message and one located in the 'Contact Us' section on the home page. main-nav.html : Navigation bar with page links and icons, information is flowing from front matter located in _data\\navigation\\main.yml . The main-nav.html is embedded inside header.html . press.html : Populates Press information such as the article title, news source, and link from the markdown files in the _press folder. project-card.html : Populates the relevant information for each project card based on the project's markdown file. More details in the Projects section. resource-card.html : Populates the 'Getting Started' panel on individual project pages. The Liquid in the code is determining what resources the project is using, and looking up the corresponding svg icon in the _includes\\svg folder. social.html : Populates linked social media icons in the header navigation bar. The front matter comes from _data\\navigation\\social.yml . sponsors.html : Populates linked icons for Sponsors on the home page. Return to Contents Projects Structure of the Project Cards and Project Pages See the index.html located in the root directory. This is where all the sections (i.e. project cards, about, contact, etc.) of the home page are laid out. You'll see the following code: All the items listed after '{%- include ' are individual HTML files for each separate section, located in the '_includes' folder, which is standard in Jekyll. If you follow the link to current-projects.html in the _includes folder, you'll see that it contains a looping structure for displaying the project cards. The projects are sorted based on the front matter (by status and project name) determined in each individual project's markdown file located in the _projects folder. a) The primary level of sorting places the projects that are \"Active\" first, followed by \"Rebooting\", \"Completed\", and \"On-Hold\", in this order. b) The secondary level of sorting is alphabetically by the projects' name, so projects are sorted alphabetically within each status group. For example, the ordering of projects would look like this: 311-Data (Status: Active) Civic Tech Index (Status: Active) Write for All (Status: Active) Food Oasis (Status: Rebooting) Projects with the front matter hide: true will not appear on the home page. Front matter/information for each project is located in the _projects folder. This folder contains the markdown files for each project. To update status, location, leadership, links, recruiting, and other information - simply edit the front matter (the information between the --- . This information will flow through to the project cards as well as the project pages. See the Template of a project.md file for more detail. To update logic, styling, and layout of ALL project cards , see the project-card.html in the _includes file. All the information extracted through the Liquid logic is coming from the markdown files in the _projects folder. Specifically, the following information is being extracted: Project image link (actual images are stored in the asset\\images\\projects folder) Project name and link to project page Status of project Project links (i.e. Github, website, Slack, etc.) Project partner (if any) Roles that the project is looking for (if the project is active or rebooting) Project location, and Technologies used for the project To update the logic, styling, and layout of ALL project pages , see project.html layout in the _layout folder. For a walk-through of the project layout, see the Guide to the Project Layout . Return to Contents Guide Pages The guide pages are a collection of pages that use the guide-page.html layout to format the header content. The header content uses the front matter in the markdown files from the _guide-pages folder to populate the title, description of the page, and the list of contents. An example of the markdown file is show below: --- title: Getting the Most Out of GitHub Issues description: Each of Hack for LA\u2019s GitHub project repositories (repos) use <a href=\"https://guides.github.com/features/issues/\">issues</a> to track and organize ideas, enhancements, and tasks. All team members will use GitHub issues to communicate in our multifunctional teams. <br><br> When creating a new GitHub issue, the following tips will help you provide consistent formatting, a clear and concise overview, actionable tasks, explanatory resources, and resum\u00e9 items to add value for all volunteers. <br><br> <em>All GitHub Issues use <strong>markdown</strong> for formatting. View GitHub\u2019s <a href=\"https://guides.github.com/features/mastering-markdown/\">Mastering Markdown</a> for a simple guide.</em> in-this-guide: - name: Example of a Good End-to-End Issue link: '#example-issue' - name: Issue Sections - Description and Tips link: '#issue-sections' - name: Issue Template link: '#issue-template' - name: Member Analytics link: '#member-analytics' --- <HTML CODE GOES HERE> HTML is placed after the front matter to populate the content, as each guide page is uniquely structured. In the guide-pages.html layout file, you'll see {{ content | markdownify }} , which is a Liquid filter that helps with converting the code below the front matter into HTML. To help keep the guide page elements consistent and DRY, styling for the majority of elements have been created in the _guide-pages.scss file, and are demonstrated below. Please note the tags and classes used as you create your guide page. To add unique formats or styles, create a Sass file inside the _sass/components/guide-pages folder, with a name that corresponds to your markdown file. Don't forget to import your new Sass file in the main _sass/main.scss file with the other guide pages. To add images, or to reuse images (such as arrows), see the assets/images/guides folder. Create a folder to add the images for your guide page. Return to Contents Styling If you're new or unfamiliar with SASS, take a look at these links below: 1. Sass in Jekyll 2. Sass Language: Sass Basics and Documentation Why Sass? (From Sass Basics Guide): \"Sass lets you use features that don't exist in CSS yet like variables, nesting, mixins, inheritance and other nifty goodies that make writing CSS fun again.\" Sass Basics Summary Variables: CSS values can be stored in variables, variables are denoted with $ . Nesting: CSS selectors can be nested in a similar hierarchy as HTML. Partials: Partial Sass files are snippets of CSS that you can include in other Sass files. It can be used with the @use rule and the name of a partial must be prefixed with an _ , doing so notifies Sass that it is a partial file, as to prevent it from being generated into a CSS file. Modules: Modules can also be used with the @use rule (you can pass in the module name without the extension: i.e. @use 'example'; ). The rule also allows you to use the variables, mixins, and functions of the module passed in. Mixins: Similar to variables, mixins are a good way to keep code DRY. However, instead of using a variable to store a small piece of information, mixins are used to store chunks of code to be reused over and over. Mixins can be used with @include mixin-name . A good use of mixins would be to store values for vendor prefixes. Extend/Inheritance: The use of @extend allows you to share a set of CSS properties from one selector to another. A selector that is to be shared will be prefixed with % . Operators: Sass allows the use of standard math operators such as +, -, *, /, and %. Styling Files All of Hack for LA's styling files are contained in _sass . 1. Main.scss and Normalize.scss Files 3. Components 4. Elements 5. Layouts 6. Variables Main.scss and Normalize.scss Files Main.scss is the primary file that imports all the other stylesheets within the various subfolders contained in the main _sass folder. It is also the file that Jekyll will use to compile into CSS within the _site folder. Normalize.scss helps normalize styling across all browsers to preserve consistency. Components This folder contains stylesheets for specific pages or page components. Any styling that is unique to a page or component should be made in these stylesheets. Elements The elements folder contains the reusable styles for basic elements of a page such as the base of a page (including styles for elements that may be included in a page such as images), buttons, forms, icons, lists, and typography. Please read about how to implement reusable components HERE . Layouts The layouts folder contains _main.scss which is different from the primary _main.scss, although it does act as a global file in that it affects all pages on the website. The styles within this _main.scss are used to push the footer to the bottom of the page. Also included in the layouts folder is the _redirect.scss which makes adjustments to pages that use the 'redirect' layout. Variables The variables folder holds a list of variables that we use throughout the website. For example, the _colors.scss defines the various colors that are used in the site's color scheme. The _layout.scss file contains various width values for different screen sizes (i.e. mobile, tablet, desktop). The last file, _typography.scss defines the various styles for fonts and the styling of fonts based on HTML tags. Return to Contents API Endpoints This section aggregates all the API endpoints used throughout the project. Project Meetings Project meetings display all the meetings times of each project team. Currently, it is using a static JSON file to load meeting times onto the page and then updating meeting times using an API linking to VRMS data. See the Files section for more information about project meetings . Project Languages While most information for a project is pulled from its markdown file, languages for projects are pulled from a project's Github API. See the project layout wiki for additional detail. Project Contributors Similar to project languages, project contributors are also pulled from Github's list. Currently, the contributors list is showing members based on commits (individuals who have made more Github commits show up on top of the list). We are working on a way to use Github to also include members who contribute to discussions or project issues (i.e. UI/UX designers) without commiting code. See the project layout wiki for additional detail on how the contributor information is pulled from the API. Action Network Hack for LA is currently using Action Network to collect and store an email subscription list for users who are interested in receiving updates from Hack for LA. The script for embedding the API into the sign up forms can be found in assets\\js\\api-actionnetwork.js . The script is using the DOM to create and embed Action Network into the signup form, and sending any submissions to Action Network. Hotjar Hotjar is a behavior analytics tool that we are using to analyze how visitors are interacting with the Hack for LA site. However, since the free tier of Hotjar provides 3 funnels, we are limited to tracking only Home page and the Getting Started page. We've also chosen to use Google Analytics in conjunction with Hotjar. The script for the Hotjar API can be found in the head.html file which sets the <head> for every site page. Google Analytics Google Analytics is our primary tool for analyzing user interaction and traffic to the Hack for LA website. The script for the Google Analytics API can be found in the head.html file as well as the redirect.html layout file, to ensure that every page will be analyzed. Google Calendar Prior to Covid-19, we utilized Google Calendars to display recurring Hack Night events. Now that meetings and events are held remotely, the calendar is not being displayed. The script for embedding the Google Calendar can be found in assets\\js\\api-calendar.js . Return to Contents","title":"Hack for LA's Site Architecture"},{"location":"Hack-for-LA%27s-Site-Architecture/#contents","text":"Repository Overview Configuration Files Jekyll Folders Collections Folders Other Asset Folders Pages Redirections Collections Includes Projects Guide Pages Styling API Endpoints","title":"Contents:"},{"location":"Hack-for-LA%27s-Site-Architecture/#repository-overview","text":"","title":"Repository Overview"},{"location":"Hack-for-LA%27s-Site-Architecture/#configuration-files","text":"_config.yml : stores site-wide configuration data (variables). This may be: information that Jekyll uses to render our site (for example: whether pages should be accessed as page.html or page/), or information we can use on web pages using Liquid. (See the Jekyll documentation and Liquid reference for more information on Liquid.) For example, title: Hack for LA sets \"Hack for LA\" as the value for the variable title . We can use the Liquid tag {{ site.title }} in our HTML, and Jekyll will output \"Hack for LA\" at that location. _.gitignore : Tells git which files shouldn't be tracked for changes. Most if not all repos have a .gitignore file. You probably won't need to touch it unless you're a lead dev. .dockerignore has a similar function. CNAME : part of the setup that allows the domain name \"hackforla.org\" point to our repo on the GitPages servers. You don't need to touch this.","title":"Configuration Files"},{"location":"Hack-for-LA%27s-Site-Architecture/#jekyll-folders","text":"Standard Jekyll builds include the following folders: * _site/: When you run Jekyll on your local machine (e.g., using Docker), Jekyll compiles your local code and outputs the website to _site/. Note that _site/ is listed in .gitignore and doesn't exist on the github repo - it's only there for your local viewing. Don't edit code in the site folder; nobody will be able to see your hard work. _data/ : Data files (possible formats include CSV, JSON, XML) can be stored here, and referenced in pages using Liquid via site.data.[filename] Navigation : Contains yml files for the navigation bar for different sections of the home page/individual site pages, as well as social media links. Github-data.json: Contains contributor information for each project, which is automatically pulled from Github. _includes/ : Best place to put HTML building blocks that are repeated on multiple pages. Forms: Includes HTML files for the Contact Us section and a generic sign up form (for email subscriptions). The Contact Us form can be edited to change the look of the section on the home page. Svg: Contains svg files for all the icons used on the site. The remaining HTML files correspond to various HTML snippets seen on every page of the site. When the Liquid tag (i.e. {% include [filename].html %} ) is used in a page file (HTML or Markdown), the content from the included HTML snippet gets pulled in at that point. For more details on each include, see the Includes section below. _layouts/ : A .md or HTML file can call a layout in its front matter (the section between the --- bars). The Layout determines the HTML shell of the page. The content of the .md file (anything after the front matter) gets inserted into the shell at the point where the layout says {{ content }} . We use layouts when we want different pages to have the same overall shell (e.g., header, footer, etc.). default.html : layout used for most pages (including project pages). Includes page elements such as the head, header, and footer, which are pulled from the _includes folder. guide-pages.html : is based on the default layout, and sets additional layout for the header content - such as the hero image, title of the page, description of the page, and a list of contents. (See additional details in the Guide Pages section). project.html : is based on the default layout, and sets additional layout and styling for individual project pages. (See additional details in the Projects section). redirect.html : includes the header and footer HTML files, as well as a message to the user that they are being redirected to an external page. This layout is primarily used for our surveys, which uses Google Forms.","title":"Jekyll Folders"},{"location":"Hack-for-LA%27s-Site-Architecture/#collections-folders","text":"Collections are always folders with a preceding underscore (_), and are used to group related content. Usually the items in a collection are .md files. Jekyll is able to process items in a collection iteratively - for example, _projects/ contains an .md file containing information for each H4LA project. With just a few lines of Liquid code on our front page file, we're able to publish information for our 20+ projects. To use a collection, it must be defined in the _config.yml file, under the collections: section. Set output: true if and only if you want Jekyll to generate separate HTML pages for each item within the collection. Output is set to true for the Project pages, because we want each Project to have its own page. See Collections for an explanation of each collection.","title":"Collections Folders"},{"location":"Hack-for-LA%27s-Site-Architecture/#other-asset-folders","text":"_sass/ : All sass (.scss) files are imported to the main.scss file , which Jekyll processes into a single stylesheet, main.css , which defines all the styles used on the site. _sass/components/ : Because each page has at least some own custom styling, page-specific .scss files live in this subdirectory. For more information on styling, see the Styling section). assets/images/ : All images displayed on the website are stored in this folder. Each project or page has a subfolder for slightly better organization. assets/js/ : Externally-referenced javascripts can live here. One of the files is for the Action Network API, Hack for LA is currently using Action Network to collect and maintain emails for users who are interested in receiving updates and Hack for LA's email subscription. The second file is for the Google Calendar API, which currently redirects to Google Calendars, displaying Hack Night events (which are currently held remotely).","title":"Other Asset Folders"},{"location":"Hack-for-LA%27s-Site-Architecture/#pages","text":"All pages that aren't automatically generated within a Collection are organized in this directory. index.html : is where all the sections (i.e. project cards, about, contact, etc.) of the home page are laid out. The files that are \"included\" are from the _includes folder. Note: You'll also notice there is this condition {% assign remote-only = 'true' %} : This is here to filter between two views - one displaying Hack Nights (when we do have in-person meetings), and one without (to accomodate for working remotely due to Covid-19). getting-started.html : The 'Getting Started' button on the home page leads to this page. Thus, this HTML file is using the default layout. The page is divided into four sections/cards, including the introduction, Self Onboarding, Guided Onboarding, and the Once you have joined a team section. project-meetings.html : New Volunteers on the 'Getting Started' page are prompted to check the 'Team Meeting Overview' page. The link will lead to the https://www.hackforla.org/project-meetings page. The Project Meetings page is similar to the 'Getting Started' because they are standalone HTML files that are deployed as their own page (unlike project pages which derive their information from markdown files). Currently, the page is generated through a two-step process to load the meeting times. We're doing this process in two-steps to ensure that the user will always see a page loaded with meeting times. Otherwise, the page may indicate that there are no meetings available as a placeholder message while the page is loading, despite the actual meeting information. 1. The first step in the process is to load the page using a static JSON file, project-meetings-from-vrms.json in the _data folder. The logic {% assign localData = site.data.project-meetings-from-vrms | jsonify %} is pulling information from the static JSON file located in the data folder and converting the JSON into a more usable form, then loading the information onto the page using DOM manipulation, all executed within the schedule function. The next step is to check the information on the loaded page with up-to-date information from VRMS. The data is being pulled from https://www.vrms.io/api/recurringevents . After the data is fetched from the API url, the information inside the new JSON is also converted into a usable form, is checked for differences between the static JSON that was initially loaded onto the page, and any differences that were found will be replaced with the updated VRMS information. Return to Contents","title":"Pages"},{"location":"Hack-for-LA%27s-Site-Architecture/#redirections","text":"The .md files in this directory are converted to placeholder HTML files, which automatically redirect the viewer to another page. Each file uses the redirect layout (called in the front matter) and includes a custom front matter tag, redirect-to , that specifies the destination URL. The redirect layout then calls this tag using e.g., <a href=\"{{ page.redirect_to }}\"> . The redirect.html layout file also includes code for the Google Analytics API, in order to analyze user interaction with redirected pages. The files using the redirect layout include: * conduct.md : links to Hack for LA's Code of Conduct * donate.md : links to https://www.codeforamerica.org/donate * github.md : Hack for LA's Website Github page * meetup.md : Hack for LA's Meetup page * nationalday.md : Hack for LA's 2019 Day of Civic Hacking * slack.md : Hack for LA's Slack * survey.md files: redirects to various Google Forms surveys * calendar.md : redirects to Hack for LA's Google Calendar with workshops that run outside of regular Hack Nights. These workshops are currently onhold, due to Covid-19, with the possibility of being held remotely.","title":"Redirections"},{"location":"Hack-for-LA%27s-Site-Architecture/#github-related-folders","text":".github/ : holds a couple of files that interact with the Github API and help us keep our repo secure and up to date. github-actions : includes a couple of scripts action.yml : contains front matter for pulling Github API data into a JSON with information relating to project contributors and languages used. get-project-data.js : script to run Github API. package-lock.json : JSON with project contributors and languages used in each project. package.json : JSON for dependencies.","title":"Github-related folders"},{"location":"Hack-for-LA%27s-Site-Architecture/#collections","text":"help us out by making .md templates in the wiki and linking them here Hack-Nights : Locations for Hack for LA's in-person meetings (before Covid-19). Press : Press releases related to Hack for LA. The markdown files include front matter for the link, title, and source of the article. The press.html in the includes folder uses Liquid to extract the front matter from these markdown files to display this information onto the home page. Projects : Each markdown file represents each project listed on the home page's Projects section. (See additional details in the Projects section). TEMPLATE Sponsors : Hack for LA's Sponsors, and include each sponsor's name, link, logo, and order/position to be displayed on the webpage. Testimonials : Includes Mayor Garcetti's testimonial of Hack for LA's amazing work! :) Guide Pages : Markdown files in the Guide Pages folder represent each guide page. The guide pages are structured using the guide-page.html layout (to consistently format the header content) with additional HTML under the front matter to display content unique to each page. (See additional details in the Guide Pages section). Credits : If you use an image that was generated by someone else, credit them here. TEMPLATE Communities : for Communities of Practice groups. TEMPLATE Return to Contents","title":"Collections"},{"location":"Hack-for-LA%27s-Site-Architecture/#includes","text":"about.html : Includes description of Hack for LA for the About section on the home page. calendar.html : (Currently disabled) Contains upcoming events. current-projects.html : Populates the project cards' markdown files (from the _projects folder onto the home page in the order of project status and project names. footer.html : Footer navigation bar, includes social media links which are populated from the front matter located in _data\\navigation\\social.yml . hack-nights.html : (Currently disabled) Displays weekly Hack Nights information. Hack Night location and other information are populated from the _hack-nights folder. head.html : Includes page title and API scripts for Google Analytics and Hotjar. Google Analytics is the primary analysis tool, but our legacy tool, Hotjar provides us heatmaps of the Home page and the Getting Started page. header.html : Includes Hack for LA's logo, navigation bar, main-nav.html and social media links/icons ( social.html ). hero.html : Introduction to Hack for LA on the home page. home-getting-started.html : 'Getting Started' button linking to the Getting Started page. There are two of these buttons, one located beneath the hero introductory message and one located in the 'Contact Us' section on the home page. main-nav.html : Navigation bar with page links and icons, information is flowing from front matter located in _data\\navigation\\main.yml . The main-nav.html is embedded inside header.html . press.html : Populates Press information such as the article title, news source, and link from the markdown files in the _press folder. project-card.html : Populates the relevant information for each project card based on the project's markdown file. More details in the Projects section. resource-card.html : Populates the 'Getting Started' panel on individual project pages. The Liquid in the code is determining what resources the project is using, and looking up the corresponding svg icon in the _includes\\svg folder. social.html : Populates linked social media icons in the header navigation bar. The front matter comes from _data\\navigation\\social.yml . sponsors.html : Populates linked icons for Sponsors on the home page. Return to Contents","title":"Includes"},{"location":"Hack-for-LA%27s-Site-Architecture/#projects","text":"","title":"Projects"},{"location":"Hack-for-LA%27s-Site-Architecture/#structure-of-the-project-cards-and-project-pages","text":"See the index.html located in the root directory. This is where all the sections (i.e. project cards, about, contact, etc.) of the home page are laid out. You'll see the following code: All the items listed after '{%- include ' are individual HTML files for each separate section, located in the '_includes' folder, which is standard in Jekyll. If you follow the link to current-projects.html in the _includes folder, you'll see that it contains a looping structure for displaying the project cards. The projects are sorted based on the front matter (by status and project name) determined in each individual project's markdown file located in the _projects folder. a) The primary level of sorting places the projects that are \"Active\" first, followed by \"Rebooting\", \"Completed\", and \"On-Hold\", in this order. b) The secondary level of sorting is alphabetically by the projects' name, so projects are sorted alphabetically within each status group. For example, the ordering of projects would look like this: 311-Data (Status: Active) Civic Tech Index (Status: Active) Write for All (Status: Active) Food Oasis (Status: Rebooting) Projects with the front matter hide: true will not appear on the home page. Front matter/information for each project is located in the _projects folder. This folder contains the markdown files for each project. To update status, location, leadership, links, recruiting, and other information - simply edit the front matter (the information between the --- . This information will flow through to the project cards as well as the project pages. See the Template of a project.md file for more detail. To update logic, styling, and layout of ALL project cards , see the project-card.html in the _includes file. All the information extracted through the Liquid logic is coming from the markdown files in the _projects folder. Specifically, the following information is being extracted: Project image link (actual images are stored in the asset\\images\\projects folder) Project name and link to project page Status of project Project links (i.e. Github, website, Slack, etc.) Project partner (if any) Roles that the project is looking for (if the project is active or rebooting) Project location, and Technologies used for the project To update the logic, styling, and layout of ALL project pages , see project.html layout in the _layout folder. For a walk-through of the project layout, see the Guide to the Project Layout . Return to Contents","title":"Structure of the Project Cards and Project Pages"},{"location":"Hack-for-LA%27s-Site-Architecture/#guide-pages","text":"The guide pages are a collection of pages that use the guide-page.html layout to format the header content. The header content uses the front matter in the markdown files from the _guide-pages folder to populate the title, description of the page, and the list of contents. An example of the markdown file is show below: --- title: Getting the Most Out of GitHub Issues description: Each of Hack for LA\u2019s GitHub project repositories (repos) use <a href=\"https://guides.github.com/features/issues/\">issues</a> to track and organize ideas, enhancements, and tasks. All team members will use GitHub issues to communicate in our multifunctional teams. <br><br> When creating a new GitHub issue, the following tips will help you provide consistent formatting, a clear and concise overview, actionable tasks, explanatory resources, and resum\u00e9 items to add value for all volunteers. <br><br> <em>All GitHub Issues use <strong>markdown</strong> for formatting. View GitHub\u2019s <a href=\"https://guides.github.com/features/mastering-markdown/\">Mastering Markdown</a> for a simple guide.</em> in-this-guide: - name: Example of a Good End-to-End Issue link: '#example-issue' - name: Issue Sections - Description and Tips link: '#issue-sections' - name: Issue Template link: '#issue-template' - name: Member Analytics link: '#member-analytics' --- <HTML CODE GOES HERE> HTML is placed after the front matter to populate the content, as each guide page is uniquely structured. In the guide-pages.html layout file, you'll see {{ content | markdownify }} , which is a Liquid filter that helps with converting the code below the front matter into HTML. To help keep the guide page elements consistent and DRY, styling for the majority of elements have been created in the _guide-pages.scss file, and are demonstrated below. Please note the tags and classes used as you create your guide page. To add unique formats or styles, create a Sass file inside the _sass/components/guide-pages folder, with a name that corresponds to your markdown file. Don't forget to import your new Sass file in the main _sass/main.scss file with the other guide pages. To add images, or to reuse images (such as arrows), see the assets/images/guides folder. Create a folder to add the images for your guide page. Return to Contents","title":"Guide Pages"},{"location":"Hack-for-LA%27s-Site-Architecture/#styling","text":"If you're new or unfamiliar with SASS, take a look at these links below: 1. Sass in Jekyll 2. Sass Language: Sass Basics and Documentation","title":"Styling"},{"location":"Hack-for-LA%27s-Site-Architecture/#why-sass","text":"(From Sass Basics Guide): \"Sass lets you use features that don't exist in CSS yet like variables, nesting, mixins, inheritance and other nifty goodies that make writing CSS fun again.\"","title":"Why Sass?"},{"location":"Hack-for-LA%27s-Site-Architecture/#sass-basics-summary","text":"Variables: CSS values can be stored in variables, variables are denoted with $ . Nesting: CSS selectors can be nested in a similar hierarchy as HTML. Partials: Partial Sass files are snippets of CSS that you can include in other Sass files. It can be used with the @use rule and the name of a partial must be prefixed with an _ , doing so notifies Sass that it is a partial file, as to prevent it from being generated into a CSS file. Modules: Modules can also be used with the @use rule (you can pass in the module name without the extension: i.e. @use 'example'; ). The rule also allows you to use the variables, mixins, and functions of the module passed in. Mixins: Similar to variables, mixins are a good way to keep code DRY. However, instead of using a variable to store a small piece of information, mixins are used to store chunks of code to be reused over and over. Mixins can be used with @include mixin-name . A good use of mixins would be to store values for vendor prefixes. Extend/Inheritance: The use of @extend allows you to share a set of CSS properties from one selector to another. A selector that is to be shared will be prefixed with % . Operators: Sass allows the use of standard math operators such as +, -, *, /, and %.","title":"Sass Basics Summary"},{"location":"Hack-for-LA%27s-Site-Architecture/#styling-files","text":"All of Hack for LA's styling files are contained in _sass . 1. Main.scss and Normalize.scss Files 3. Components 4. Elements 5. Layouts 6. Variables","title":"Styling Files"},{"location":"Hack-for-LA%27s-Site-Architecture/#mainscss-and-normalizescss-files","text":"Main.scss is the primary file that imports all the other stylesheets within the various subfolders contained in the main _sass folder. It is also the file that Jekyll will use to compile into CSS within the _site folder. Normalize.scss helps normalize styling across all browsers to preserve consistency.","title":"Main.scss and Normalize.scss Files"},{"location":"Hack-for-LA%27s-Site-Architecture/#components","text":"This folder contains stylesheets for specific pages or page components. Any styling that is unique to a page or component should be made in these stylesheets.","title":"Components"},{"location":"Hack-for-LA%27s-Site-Architecture/#elements","text":"The elements folder contains the reusable styles for basic elements of a page such as the base of a page (including styles for elements that may be included in a page such as images), buttons, forms, icons, lists, and typography. Please read about how to implement reusable components HERE .","title":"Elements"},{"location":"Hack-for-LA%27s-Site-Architecture/#layouts","text":"The layouts folder contains _main.scss which is different from the primary _main.scss, although it does act as a global file in that it affects all pages on the website. The styles within this _main.scss are used to push the footer to the bottom of the page. Also included in the layouts folder is the _redirect.scss which makes adjustments to pages that use the 'redirect' layout.","title":"Layouts"},{"location":"Hack-for-LA%27s-Site-Architecture/#variables","text":"The variables folder holds a list of variables that we use throughout the website. For example, the _colors.scss defines the various colors that are used in the site's color scheme. The _layout.scss file contains various width values for different screen sizes (i.e. mobile, tablet, desktop). The last file, _typography.scss defines the various styles for fonts and the styling of fonts based on HTML tags. Return to Contents","title":"Variables"},{"location":"Hack-for-LA%27s-Site-Architecture/#api-endpoints","text":"This section aggregates all the API endpoints used throughout the project. Project Meetings Project meetings display all the meetings times of each project team. Currently, it is using a static JSON file to load meeting times onto the page and then updating meeting times using an API linking to VRMS data. See the Files section for more information about project meetings . Project Languages While most information for a project is pulled from its markdown file, languages for projects are pulled from a project's Github API. See the project layout wiki for additional detail. Project Contributors Similar to project languages, project contributors are also pulled from Github's list. Currently, the contributors list is showing members based on commits (individuals who have made more Github commits show up on top of the list). We are working on a way to use Github to also include members who contribute to discussions or project issues (i.e. UI/UX designers) without commiting code. See the project layout wiki for additional detail on how the contributor information is pulled from the API. Action Network Hack for LA is currently using Action Network to collect and store an email subscription list for users who are interested in receiving updates from Hack for LA. The script for embedding the API into the sign up forms can be found in assets\\js\\api-actionnetwork.js . The script is using the DOM to create and embed Action Network into the signup form, and sending any submissions to Action Network. Hotjar Hotjar is a behavior analytics tool that we are using to analyze how visitors are interacting with the Hack for LA site. However, since the free tier of Hotjar provides 3 funnels, we are limited to tracking only Home page and the Getting Started page. We've also chosen to use Google Analytics in conjunction with Hotjar. The script for the Hotjar API can be found in the head.html file which sets the <head> for every site page. Google Analytics Google Analytics is our primary tool for analyzing user interaction and traffic to the Hack for LA website. The script for the Google Analytics API can be found in the head.html file as well as the redirect.html layout file, to ensure that every page will be analyzed. Google Calendar Prior to Covid-19, we utilized Google Calendars to display recurring Hack Night events. Now that meetings and events are held remotely, the calendar is not being displayed. The script for embedding the Google Calendar can be found in assets\\js\\api-calendar.js . Return to Contents","title":"API Endpoints"},{"location":"Home/","text":"Welcome to the HackforLA.org Website Wiki! Project Definition The purpose of the website is to showcase all of the projects HfLA is working on to attract new volunteers & generate financial support from donors/sponsors. Introduction to the Project Joining the HackforLA.org Website Team Team Tools Resources Agendas Project Terminology","title":"Home"},{"location":"Home/#welcome-to-the-hackforlaorg-website-wiki","text":"","title":"Welcome to the HackforLA.org Website Wiki!"},{"location":"Home/#project-definition","text":"The purpose of the website is to showcase all of the projects HfLA is working on to attract new volunteers & generate financial support from donors/sponsors.","title":"Project Definition"},{"location":"Home/#introduction-to-the-project","text":"","title":"Introduction to the Project"},{"location":"Home/#joining-the-hackforlaorg-website-team","text":"","title":"Joining the HackforLA.org Website Team"},{"location":"Home/#team","text":"","title":"Team"},{"location":"Home/#tools","text":"","title":"Tools"},{"location":"Home/#resources","text":"","title":"Resources"},{"location":"Home/#agendas","text":"","title":"Agendas"},{"location":"Home/#project-terminology","text":"","title":"Project Terminology"},{"location":"How-to-create-a-page-on-Hack-for-LA-website/","text":"Starting Instructions: Create HTML file in root folder with the name of your page ex) yourPageName.html Create a sass stylesheet in \u2018_sass/components\u2019 with the same name as your HTML file but with an underscore _ at the beginning. ex) _sass/components/_yourPageName.scss Import your pages stylesheet in to the main.scss stylesheet (located: _sass/main.scss ) by adding this line of code under the component section in main.scss @import \u2018components/yourPageName.scss\u2019 Create a folder within assets/images named exactly like your html file. Here you can place all the images you are using in this folder assets/images/yourPageName Helpful links: * Standardized-Components * Hack for LA's Site Architecture <!-- Make sure to include the Jekyll Front Matter as the first thing in the file. Following the format below. --> <!-- Any file that contains a YAML front matter block will be processed by Jekyll as a special file.--> --- layout: default title: Your Page Name --- <!-- Header banner --> <div class=\"header-container--yourPageName\"> <div> <h1>Title</h1> <p>Description of page</p> </div> <img src=\"./assets/images/yourPageName/yourPageName-icon.svg\" alt=\"image of a person using a computer\" /> </div> <!-- Header banner --> <!-- Page body --> <div class=\"content-section\"> <!-- Card --> <!-- Cards have been standardized and can be found in _sass/elements/_cards--> <div class=\"page-card card-primary page-card-lg card-body card-width\"> <img src=\"./assets/images/yourPageName/yourPageName_icon.svg\" /> <div> <h3>Card Title</h3> <img class=\"card-icon\" src=\"./assets/images/sitemap/lightbulb.svg\" /> <p> Card content for your page. </p> <!-- Buttons have been standardized and can be found in _sass/elements/_buttons.scss--> <button class=\"btn btn-primary btn--site-map-suggest\"> Button element </button> </a> </div> </div> <!-- Card --> </div> <!-- Include javaScript --> <script> // Include your JavaScript code directly in this tag or create a separate file and import code. function helloWorld() { console.log('Hello World'); } </script>","title":"How to create a page on Hack for LA website"},{"location":"Instructions-for-adding-Status-Labels-to-issues/","text":"Please update your issue with one of the following labels at all times. For Example, a developer was stuck and needed the help of other developers, so they added a Help Wanted label. Once they got the help, they removed the Help Wanted label and added the Needs Update label. After they do the update, the next thing they will do is remove the Needs Update label and add the Update added label. Blockers: The person assigned the issue has gone as far as possible. They need a response from someone else before work can continue on this issue. This is not the same as a dependency. Dependency: This is the same as a blocker but a dependency label is added when another issue is blocking the completion or starting of this issue. Help Wanted: Internal assistance is required to make progress but it is unclear who needs to help. Update Added: No blockers and update is ready for review by Team Leads. Needs Update: No update has been provided, needs to an update in order to be reviewed. User Acceptance Testing: Ready to be tested after review.","title":"Instructions for adding Status Labels to issues"},{"location":"Introduction-to-the-Project/","text":"Hack for LA Website (HackforLA.org) The HackforLA.org website\u2019s purpose is to connect volunteers with projects, code for America and Hack for LA\u2019s shared mission and let external stakeholders know that we are producing valuable projects with tangible impact. The website is also the place that new developers often start, moving on to more complex projects after they have mastered docker, git, github and working collaboratively on a multidisciplinary team. History The new website team was formed when the website was one page and required a code change to something easier to update. This website displayed a handful of projects, an email signup form and a focus on getting people to come to our 3 weekly hack nights with information being hosted on meetup. COVID-accelerated Development COVID-19 safer at home policies created urgency to move all the teams to fully remote, and redesign the onboarding methodology from in-person and being driven by meetup, to online driven by a variety of new recruiting sources. Launch of a step-by-step getting started guide Creation and integration of an onboarding video Creation of an online team meeting schedule and API integration with VRMS to make the information able to be updated by project managers in the future Github API integration to display project languages alongside static project information Creation of an analytics dashboard to display and analyze all the survey data being gathered Created wiki that details all aspects of hackforla.org website code for new developers HackforLA.org under development for launch in coming three months Step-by-step guides for onboarding (e.g., 2 Factor Authentication , How to write a good github issue , Creating a Project Board in Github, etc.) Integration of our Google Data Studio analytics dashboard into the website, for transparency for all members Launch project filtering by skill, language, topic area, etc. Create credits page Create an events page to better communicate how we come together, especially in absence of physical events Create wins page to encourage the capture and celebration of new jobs, promotions, skills learned, etc. Redesign of mobile version of site Refine collection and reporting of analytics *About Us Page - Helpful information about our goals, roadmap and north star Civic engagement - project details, how to help, important members and tools Communities of practice - Provide users information regarding different communities (UI, Data, Eng, PM, etc). Helpful for users to connect with specific groups. Credits Page - Photo and icon credits along with those who contributed to it. Events Page - List of events our users can attend to help our project along with learning more skills. Guide Page - Various guides on how tos and metrics. Useful for users to quickly learn something Impact Page - Projects we\u2019ve worked on and their impact. We can showcase to potential partners and new volunteers how their work can make a difference. Getting Started Page - New user onboarding. This is useful for new users and getting them up to speed. Join Us Page - Page to let users know various way they can join our cause and contribute. Organizational Dashboard Page - Organizational Metrics Page - Website metrics. Useful to help us analyze where and what our users are doing and how we can help them better Project Page - New project page with all our current projects. Helps users see whats available and where their interested in helping out Project Verticales Page - Projects grouped under various social and civic efforts to better help users pick their project based on their choice of political engagement field. Project Team Meetings page - Meeting times for all groups. Users can quickly check and attend those they are interested in working with Roles- All available roles users can volunteer for and help out Site map Page - Map of the website and all its pages. Let\u2019s users know how they can access certain parts of the site Toolkit Page - Guides on how to set up github 2fa, create issues etc. Useful for new users Wins Page - Helping our volunteers recognize their milestones and motivate them to reach higher. And where are we going from here? We are in the process of developing a product roadmap that will chart out a future 6-12 months of development. We will continue taking into account past feedback, which includes the following: The primary functions of the Hack for LA website is to recruit and match prospective volunteers to ongoing technology projects. The website must achieve two key goals: (1) present a clear and compelling value proposition for participation; (2) enable interested volunteers to identify and join projects that align with both their areas of interest and skills. Earlier HFLA discovery research found that ~25% of survey respondents felt the website\u2019s UI/UX could be improved. Nearly 1 in 5 respondents could not find all the information they sought. In descending order, the top three categories of information sought are: Volunteer opportunities Current project information Other - Includes information about GitHub and Python workshops, working examples of past successful projects, what goes on at Meetup meetings, and whether beginner-level technologists can join. The current presentation of project cards on the home page forces users to scroll in a cumbersome way through one or more pages. This makes it difficult to find and locate projects of interest quickly. And the project cards do not provide a clear call to action to prospective volunteers.","title":"Introduction to the Project"},{"location":"Introduction-to-the-Project/#hack-for-la-website-hackforlaorg","text":"The HackforLA.org website\u2019s purpose is to connect volunteers with projects, code for America and Hack for LA\u2019s shared mission and let external stakeholders know that we are producing valuable projects with tangible impact. The website is also the place that new developers often start, moving on to more complex projects after they have mastered docker, git, github and working collaboratively on a multidisciplinary team.","title":"Hack for LA Website (HackforLA.org)"},{"location":"Introduction-to-the-Project/#history","text":"The new website team was formed when the website was one page and required a code change to something easier to update. This website displayed a handful of projects, an email signup form and a focus on getting people to come to our 3 weekly hack nights with information being hosted on meetup.","title":"History"},{"location":"Introduction-to-the-Project/#covid-accelerated-development","text":"COVID-19 safer at home policies created urgency to move all the teams to fully remote, and redesign the onboarding methodology from in-person and being driven by meetup, to online driven by a variety of new recruiting sources. Launch of a step-by-step getting started guide Creation and integration of an onboarding video Creation of an online team meeting schedule and API integration with VRMS to make the information able to be updated by project managers in the future Github API integration to display project languages alongside static project information Creation of an analytics dashboard to display and analyze all the survey data being gathered Created wiki that details all aspects of hackforla.org website code for new developers","title":"COVID-accelerated Development"},{"location":"Introduction-to-the-Project/#hackforlaorg-under-development-for-launch-in-coming-three-months","text":"Step-by-step guides for onboarding (e.g., 2 Factor Authentication , How to write a good github issue , Creating a Project Board in Github, etc.) Integration of our Google Data Studio analytics dashboard into the website, for transparency for all members Launch project filtering by skill, language, topic area, etc. Create credits page Create an events page to better communicate how we come together, especially in absence of physical events Create wins page to encourage the capture and celebration of new jobs, promotions, skills learned, etc. Redesign of mobile version of site Refine collection and reporting of analytics *About Us Page - Helpful information about our goals, roadmap and north star Civic engagement - project details, how to help, important members and tools Communities of practice - Provide users information regarding different communities (UI, Data, Eng, PM, etc). Helpful for users to connect with specific groups. Credits Page - Photo and icon credits along with those who contributed to it. Events Page - List of events our users can attend to help our project along with learning more skills. Guide Page - Various guides on how tos and metrics. Useful for users to quickly learn something Impact Page - Projects we\u2019ve worked on and their impact. We can showcase to potential partners and new volunteers how their work can make a difference. Getting Started Page - New user onboarding. This is useful for new users and getting them up to speed. Join Us Page - Page to let users know various way they can join our cause and contribute. Organizational Dashboard Page - Organizational Metrics Page - Website metrics. Useful to help us analyze where and what our users are doing and how we can help them better Project Page - New project page with all our current projects. Helps users see whats available and where their interested in helping out Project Verticales Page - Projects grouped under various social and civic efforts to better help users pick their project based on their choice of political engagement field. Project Team Meetings page - Meeting times for all groups. Users can quickly check and attend those they are interested in working with Roles- All available roles users can volunteer for and help out Site map Page - Map of the website and all its pages. Let\u2019s users know how they can access certain parts of the site Toolkit Page - Guides on how to set up github 2fa, create issues etc. Useful for new users Wins Page - Helping our volunteers recognize their milestones and motivate them to reach higher.","title":"HackforLA.org under development for launch in coming three months"},{"location":"Introduction-to-the-Project/#and-where-are-we-going-from-here","text":"We are in the process of developing a product roadmap that will chart out a future 6-12 months of development. We will continue taking into account past feedback, which includes the following: The primary functions of the Hack for LA website is to recruit and match prospective volunteers to ongoing technology projects. The website must achieve two key goals: (1) present a clear and compelling value proposition for participation; (2) enable interested volunteers to identify and join projects that align with both their areas of interest and skills. Earlier HFLA discovery research found that ~25% of survey respondents felt the website\u2019s UI/UX could be improved. Nearly 1 in 5 respondents could not find all the information they sought. In descending order, the top three categories of information sought are: Volunteer opportunities Current project information Other - Includes information about GitHub and Python workshops, working examples of past successful projects, what goes on at Meetup meetings, and whether beginner-level technologists can join. The current presentation of project cards on the home page forces users to scroll in a cumbersome way through one or more pages. This makes it difficult to find and locate projects of interest quickly. And the project cards do not provide a clear call to action to prospective volunteers.","title":"And where are we going from here?"},{"location":"Joining-the-HackforLA.org-Website-Team/","text":"Introduction Welcome to the Hack for LA website development team! This guide will help get you up to speed on what you need to know to get started as a project team member. Meeting Times Typical Attendees GMT Time PST Time MST Time EST Time Meeting Link Developers, UI/UX, Product Management 6 PM Monday 10 AM Sunday 11AM Sunday 1PM Sunday Zoom Developers, Product Management (Optional) 3 AM Wednesday 7 PM Tuesday 8PM Tuesday 10PM Tuesday Zoom Product Management 6 PM Thursday 10 AM Wednesday 11 AM Wednesday 1PM Wednesday Zoom Let's go! If you have not read the Guide for New Volunteers , please do so. Make sure you can make the appropriate meeting times. Join the #hfla-site Slack channel and introduce yourself. Reach out to one of our PM's \u2b06\ufe0f on our Slack channel with your Gmail address (To find the names of our PMs, check out our project page ). Accept your Google Drive invite to access the shared folder . Add yourself to the Team Roster . Slack the PM a link to the Team Roster . To ensure you get added to our Github. Read Introduction to the Project . Review How Hack for LA uses Kanban . Add any questions as comments to the guide to improve onboarding experiences. Who are you? Click the link that applies to you to find a sequence of immediate action steps: Web Developer UI/UX Designer Data Scientist Copywriter Product Manager/Owner Other Volunteer Accessibility standards Title III of the Americans with Disabilities Act (ADA) requires that all websites be accessible to people with disabilities. The World Wide Web (W3C) Consortium's Web Content Accessibility Guidelines (WCAG) 2.0 Level AA function as the current legal standard for website accessibility. Get acquainted with accessibility: https://www.ada.gov/pcatoolkit/chap5toolkit.htm","title":"Joining the HackforLA.org Website Team"},{"location":"Joining-the-HackforLA.org-Website-Team/#introduction","text":"Welcome to the Hack for LA website development team! This guide will help get you up to speed on what you need to know to get started as a project team member.","title":"Introduction"},{"location":"Joining-the-HackforLA.org-Website-Team/#meeting-times","text":"Typical Attendees GMT Time PST Time MST Time EST Time Meeting Link Developers, UI/UX, Product Management 6 PM Monday 10 AM Sunday 11AM Sunday 1PM Sunday Zoom Developers, Product Management (Optional) 3 AM Wednesday 7 PM Tuesday 8PM Tuesday 10PM Tuesday Zoom Product Management 6 PM Thursday 10 AM Wednesday 11 AM Wednesday 1PM Wednesday Zoom","title":"Meeting Times"},{"location":"Joining-the-HackforLA.org-Website-Team/#lets-go","text":"If you have not read the Guide for New Volunteers , please do so. Make sure you can make the appropriate meeting times. Join the #hfla-site Slack channel and introduce yourself. Reach out to one of our PM's \u2b06\ufe0f on our Slack channel with your Gmail address (To find the names of our PMs, check out our project page ). Accept your Google Drive invite to access the shared folder . Add yourself to the Team Roster . Slack the PM a link to the Team Roster . To ensure you get added to our Github. Read Introduction to the Project . Review How Hack for LA uses Kanban . Add any questions as comments to the guide to improve onboarding experiences.","title":"Let's go!"},{"location":"Joining-the-HackforLA.org-Website-Team/#who-are-you","text":"Click the link that applies to you to find a sequence of immediate action steps: Web Developer UI/UX Designer Data Scientist Copywriter Product Manager/Owner Other Volunteer","title":"Who are you?"},{"location":"Joining-the-HackforLA.org-Website-Team/#accessibility-standards","text":"Title III of the Americans with Disabilities Act (ADA) requires that all websites be accessible to people with disabilities. The World Wide Web (W3C) Consortium's Web Content Accessibility Guidelines (WCAG) 2.0 Level AA function as the current legal standard for website accessibility. Get acquainted with accessibility: https://www.ada.gov/pcatoolkit/chap5toolkit.htm","title":"Accessibility standards"},{"location":"November-2019-Agenda/","text":"Agenda: [ ] Recruit UI/UX designers post-onboarding [ ] Recruit additional talent post-onboarding [ ] Review status of all work streams [ ] Review project wiki [ ] Complete persona & user story ideation [ ] Prioritize user stories [ ] Confirm PM process flow diagram [ ] Confirm business objectives and epics Notes: Next Steps:","title":"November 2019 Agenda"},{"location":"November-2019-Agenda/#agenda","text":"[ ] Recruit UI/UX designers post-onboarding [ ] Recruit additional talent post-onboarding [ ] Review status of all work streams [ ] Review project wiki [ ] Complete persona & user story ideation [ ] Prioritize user stories [ ] Confirm PM process flow diagram [ ] Confirm business objectives and epics","title":"Agenda:"},{"location":"November-2019-Agenda/#notes","text":"","title":"Notes:"},{"location":"November-2019-Agenda/#next-steps","text":"","title":"Next Steps:"},{"location":"Other-Volunteer/","text":"Get an overview of the project from the Wiki. Review the Site Redesign Planning Board . Review the Project Terminology . Meet a Hack for LA co-host to discuss your interest and background. Chat with the product owner(s) or project manager by Slack or in person.","title":"Other Volunteer"},{"location":"Product-Manager-and-Owner/","text":"Each of the resources below can be considered a work-in-progress. These resources will evolve and adapt as the team and team needs change. Feel free to open an issue with a link to whichever resource needs improvement and a description of the suggested change. Learn how we setup our GitHub Kanban boards . Review the Project Terminology . Review the Software Lifecycle Diagram . Review our success metrics . Communicate with other product team members and Leadership to discuss project priorities and strategic direction. Review the Project Management Board and identify an actionable backlog item. Review Hack for LA document templates .","title":"Product Manager and Owner"},{"location":"Product-Requirements-Document/","text":"Product Requirements Document","title":"Product Requirements Document"},{"location":"Project-Terminology/","text":"Site architecture The below terms describe product development milestones for HFLA Website 2.0. current-projects Also known as home page projects . Refers to the current projects section of the home page. It is also referenced by the \u201ccurrent-projects.html\u201d file. donor page To be create is a new donor.html (or similar) file, which is linked and found by clicking the Donor\u201d menu item on the home page (possible \u201cwww.hackforla.org/donor.html\u201d). This page will provide information about Hack for LA donors, including level of sponsorship and recognition for contributions made. projects page To be created is a new projects.html (or similar) file, which is linked and found by clicking the \u201cProject\u201d menu item on the home page (possibly \u201cwww.hackforla.org/projects.html\u201d). This page will display all projects and a filter for finding projects that interest the user. single project page To be created is a new project-template.html file (or similar), which provides a deep dive into a single project. This page will have expanded information like team members and links for both the new potential volunteer and the team members. Software Development Lifecycle The below terms describe parts of the software development lifecycle for HFLA Website 2.0. epic An epic is a large body of work that can be broken down into a number of smaller stories, sometimes called issues. More information: https://www.atlassian.com/agile/project-management/epics feature A product feature is a characteristic of your product that describe its appearance, components, and capabilities. Put another way, it is a slice of business functionality that has a corresponding benefit or set of benefits for that product's end user. More information: https://www.aha.io/roadmapping/guide/requirements-management/what-are-product-features user story A user story is a tool used in Agile software development to capture a description of a software feature from an end-user perspective. It describes the type of user, what they want and why and helps to create a simplified description of a requirement. More information: https://www.atlassian.com/agile/project-management/user-stories customer research Customer research is the process of identifying customer segments, needs, and behaviors. Customer research may be carried out as part of market research, user research, or design research. More information: https://www.interaction-design.org/literature/topics/customer-research data requirements Data requirements, in the context of software development, ensure that the data produced and consumed satisfy organizational objectives, are understood by all relevant stakeholders, and meet the needs of the team that create and use the data. More information: https://www.healthit.gov/playbook/pddq-framework/data-operations/data-requirements-definition/ acceptance criteria Acceptance criteria refers to a set of predefined requirements that must be met in order to mark a user story complete. Acceptance criteria are also sometimes called the \u201cdefinition of done.\u201d They determine the scope and requirements that must be executed by developers to consider a user story finished. More information: https://www.productplan.com/glossary/acceptance-criteria/ More information: https://rubygarage.org/blog/clear-acceptance-criteria-and-why-its-important product backlog A product backlog is a list of new features, changes to existing features, bug fixes, infrastructure changes, or other activities that a team may deliver to achieve a specific outcome. The product backlog is the single authoritative source for things that a team works on. More information: https://www.agilealliance.org/glossary/backlog/ wireframe A wireframe is a static, low-fidelity representation of different layouts that form a product. Wireframes communicate structure, content, and functionality of a product, feature, or enhancement. More information: https://theblog.adobe.com/everything-you-need-to-know-about-wireframes-and-prototypes/ QA Software QA is the process of ensuring software quality. It often includes tasks like functional testing and source code quality and performance testing. More information: https://www.mindfulqa.com/qa-sdlc/ usability standards Usability falls under the broader discipline of user experience and refers to the ease of access and/or use of a product or website. These standards include compliance with ADA standards, which refer to the Americans with Disabilities Act Standards for Accessible Design. These standards state that all electronic and information technology, including websites, must be accessible to people with disabilities. More information: https://www.interaction-design.org/literature/topics/usability More information: https://www.usability.gov/what-and-why/accessibility.html product analytics Product analytics refers to capturing and analyzing quantitative data through embedded tools that record how users interact with a product. More information: https://mixpanel.com/topics/what-is-product-analytics/ product roadmap A product roadmap is a shared source of truth that outlines the vision, direction, priorities, and progress of a product over time. It is a plan of action that aligns the team around short- and long-term goals for a product and how they will be achieved. More information: https://www.atlassian.com/agile/product-management/product-roadmaps launch A software launch can be staged into a soft launch before its final release. In a soft launch, a small release is made to a limited group of individuals for beta testing. More information: https://en.wikipedia.org/wiki/Soft_launch product management Product management concerns defining the why, when, and what of a product. A product manager is responsible for setting a product's vision and strategy. A product manager leads cross-functional teams from a product's conception to launch. More information: https://www.hotjar.com/blog/product-management/ project management Project management is the application of knowledge, skills, tools, and techniques to project activities to meet defined project requirements. More information: https://www.pmi.org/about/learn-about-pmi/what-is-project-management development Software development refers to the process of conceiving, specifying, designing, programming, documenting, testing, and bug-fixing to create and maintain applications, frameworks, or other software components. More information: https://en.wikipedia.org/wiki/Software_development user interface/user experience User interface (UI) is the series of screens, pages, and visual elements, including buttons, icons, typeface, graphics, and images, that enable a person to interact with a product or service. User experience (UX), on the other hand, is the internal experience a person has as they interact with a product or service. More information: https://www.usertesting.com/blog/ui-vs-ux","title":"Project Terminology"},{"location":"Project-Terminology/#site-architecture","text":"The below terms describe product development milestones for HFLA Website 2.0. current-projects Also known as home page projects . Refers to the current projects section of the home page. It is also referenced by the \u201ccurrent-projects.html\u201d file. donor page To be create is a new donor.html (or similar) file, which is linked and found by clicking the Donor\u201d menu item on the home page (possible \u201cwww.hackforla.org/donor.html\u201d). This page will provide information about Hack for LA donors, including level of sponsorship and recognition for contributions made. projects page To be created is a new projects.html (or similar) file, which is linked and found by clicking the \u201cProject\u201d menu item on the home page (possibly \u201cwww.hackforla.org/projects.html\u201d). This page will display all projects and a filter for finding projects that interest the user. single project page To be created is a new project-template.html file (or similar), which provides a deep dive into a single project. This page will have expanded information like team members and links for both the new potential volunteer and the team members.","title":"Site architecture"},{"location":"Project-Terminology/#software-development-lifecycle","text":"The below terms describe parts of the software development lifecycle for HFLA Website 2.0. epic An epic is a large body of work that can be broken down into a number of smaller stories, sometimes called issues. More information: https://www.atlassian.com/agile/project-management/epics feature A product feature is a characteristic of your product that describe its appearance, components, and capabilities. Put another way, it is a slice of business functionality that has a corresponding benefit or set of benefits for that product's end user. More information: https://www.aha.io/roadmapping/guide/requirements-management/what-are-product-features user story A user story is a tool used in Agile software development to capture a description of a software feature from an end-user perspective. It describes the type of user, what they want and why and helps to create a simplified description of a requirement. More information: https://www.atlassian.com/agile/project-management/user-stories customer research Customer research is the process of identifying customer segments, needs, and behaviors. Customer research may be carried out as part of market research, user research, or design research. More information: https://www.interaction-design.org/literature/topics/customer-research data requirements Data requirements, in the context of software development, ensure that the data produced and consumed satisfy organizational objectives, are understood by all relevant stakeholders, and meet the needs of the team that create and use the data. More information: https://www.healthit.gov/playbook/pddq-framework/data-operations/data-requirements-definition/ acceptance criteria Acceptance criteria refers to a set of predefined requirements that must be met in order to mark a user story complete. Acceptance criteria are also sometimes called the \u201cdefinition of done.\u201d They determine the scope and requirements that must be executed by developers to consider a user story finished. More information: https://www.productplan.com/glossary/acceptance-criteria/ More information: https://rubygarage.org/blog/clear-acceptance-criteria-and-why-its-important product backlog A product backlog is a list of new features, changes to existing features, bug fixes, infrastructure changes, or other activities that a team may deliver to achieve a specific outcome. The product backlog is the single authoritative source for things that a team works on. More information: https://www.agilealliance.org/glossary/backlog/ wireframe A wireframe is a static, low-fidelity representation of different layouts that form a product. Wireframes communicate structure, content, and functionality of a product, feature, or enhancement. More information: https://theblog.adobe.com/everything-you-need-to-know-about-wireframes-and-prototypes/ QA Software QA is the process of ensuring software quality. It often includes tasks like functional testing and source code quality and performance testing. More information: https://www.mindfulqa.com/qa-sdlc/ usability standards Usability falls under the broader discipline of user experience and refers to the ease of access and/or use of a product or website. These standards include compliance with ADA standards, which refer to the Americans with Disabilities Act Standards for Accessible Design. These standards state that all electronic and information technology, including websites, must be accessible to people with disabilities. More information: https://www.interaction-design.org/literature/topics/usability More information: https://www.usability.gov/what-and-why/accessibility.html product analytics Product analytics refers to capturing and analyzing quantitative data through embedded tools that record how users interact with a product. More information: https://mixpanel.com/topics/what-is-product-analytics/ product roadmap A product roadmap is a shared source of truth that outlines the vision, direction, priorities, and progress of a product over time. It is a plan of action that aligns the team around short- and long-term goals for a product and how they will be achieved. More information: https://www.atlassian.com/agile/product-management/product-roadmaps launch A software launch can be staged into a soft launch before its final release. In a soft launch, a small release is made to a limited group of individuals for beta testing. More information: https://en.wikipedia.org/wiki/Soft_launch product management Product management concerns defining the why, when, and what of a product. A product manager is responsible for setting a product's vision and strategy. A product manager leads cross-functional teams from a product's conception to launch. More information: https://www.hotjar.com/blog/product-management/ project management Project management is the application of knowledge, skills, tools, and techniques to project activities to meet defined project requirements. More information: https://www.pmi.org/about/learn-about-pmi/what-is-project-management development Software development refers to the process of conceiving, specifying, designing, programming, documenting, testing, and bug-fixing to create and maintain applications, frameworks, or other software components. More information: https://en.wikipedia.org/wiki/Software_development user interface/user experience User interface (UI) is the series of screens, pages, and visual elements, including buttons, icons, typeface, graphics, and images, that enable a person to interact with a product or service. User experience (UX), on the other hand, is the internal experience a person has as they interact with a product or service. More information: https://www.usertesting.com/blog/ui-vs-ux","title":"Software Development Lifecycle"},{"location":"Resources/","text":"Orientation Project Terminology Hack for LA Website Software Lifecycle Diagram WCAG 2.0 Accessibility Standards Web Developer Development Readme Development Project Board Project Card Format Creating a page for Hack for LA Hack for LA's Site Architecture Project Manager GitHub Kanban Board Setup Initial Discovery Research Hack for LA Document Templates UI/UX Designer Personas and User Stories Board Create and MD File Data Scientist Success Metrics Analytics Tools FullStory Overview Role-Specific Guides Web Developer Project Manager UI/UX Designer Data Scientist Copywriter","title":"Resources"},{"location":"Resources/#orientation","text":"Project Terminology Hack for LA Website Software Lifecycle Diagram WCAG 2.0 Accessibility Standards","title":"Orientation"},{"location":"Resources/#web-developer","text":"Development Readme Development Project Board Project Card Format Creating a page for Hack for LA Hack for LA's Site Architecture","title":"Web Developer"},{"location":"Resources/#project-manager","text":"GitHub Kanban Board Setup Initial Discovery Research Hack for LA Document Templates","title":"Project Manager"},{"location":"Resources/#uiux-designer","text":"Personas and User Stories Board Create and MD File","title":"UI/UX Designer"},{"location":"Resources/#data-scientist","text":"Success Metrics Analytics Tools FullStory Overview","title":"Data Scientist"},{"location":"Resources/#role-specific-guides","text":"Web Developer Project Manager UI/UX Designer Data Scientist Copywriter","title":"Role-Specific Guides"},{"location":"Security-Updates/","text":"This project subscribes to GitHub's automated security alerting service. Occasionally the repository home page may have a yellow banner saying \"We have found a potential security vulnerability in one of your dependencies\" and a link to view the security alert. If you see this, please check our issues list to see if anyone has added an issue for fixing this. If not, please create an issue for this problem. If you feel up to it, please assign the issue to yourself and try to fix it. As with any issue, once you have fixed it on your fork of the repository, push the fixes to your fork and then open a pull request to merge this fix into the main repository. GitHub's \"dependabot\" may try to generate an automated pull request to fix this issue. Please do not accept this pull request without verifying that it works by applying the update on your local copy of the website.","title":"Security Updates"},{"location":"Standardized-Components/","text":"Overview We are standardizing the buttons, page cards, and other reusable components across all pages on the HfLA website. This is to: Prevent the slight differences we found between components on different pages during our site audit Make the site\u2019s code more scalable and easier to manage Help designers pull from existing standard designs when creating new pages Help developers build new pages with existing styles instead of starting from scratch on each new page We are following bootstrap and other class standards and naming conventions, as well as input from the HfLA team. This is a work in progress and we want to make sure this is actually useful and usable, so please feel free to provide any feedback on the #hfla-site slack channel or DM @daniellenedivi who worked on the design system. Reusability To make our reusable components available across the site, we made their CSS classes more universal and less page-specific. These reusable classes now live in common .scss files ( _buttons,scss , _page-cards.scss , etc), instead of in specific pages\u2019 scss files ( _wins-page.scss , etc), to make them easier to find and available for all pages. Each of the reusable components on our site now have several class names - one for their size, one for color, etc. This way if any style changes need to be made later on - i.e. to change every pink button to blue - the change can be made only to the CSS color class and will update all of the buttons that share that class, without having to edit every single button\u2019s unique class separately. For this reason the class names are also more generic. Similar to Bootstrap, the button class related to color is called .btn-primary instead of .btn-pink to allow for future color changes. Now the style of a specific button is also easy to quickly adjust, by switching class names in the html depending on the component size, color, etc. that you want. If you want to switch from a pink to a black button, change the class names attached to that button in the HTML from .btn-primary (pink) to .btn-dark (black). Reusable component class names include: Base class: used in every single instance of a component, this is the foundational class with properties they all share (ex: .btn , .page-card ) Size class: from xs to xl, this class sets and relates to the size of the component (ex: .btn-xl , .page-card-lg ) Color class: Sets the color of the component (ex: .btn-primary , .page-card-secondary ) Page-specific class: Includes any features that are unique to a component on a specific page - usually its placement (ex: .btn--about-us ) Additional standard classes may be added in the future as new components and variations are created. Getting started Insert all of the class names that apply to the button component you are building in HTML. This often leads to a long list of classes, but this is common when working with reusable components. Base class Start with adding the base class of the component. Using buttons as an example, the base class .btn should be used in all buttons and includes the properties they all share, no matter the size or color: Next, add the standard button classes (that currently relate to color and size ) : Size Class Continuing with the button example, the size classes .btn-xl , .btn-lg , .btn-md etc. should be used depending on the standard size of the button in the page you are developing: Color Class The color classes .btn-primary , .btn-primary-on-dark , and .btn-dark etc. should be used depending on the color of the button in the page you are developing: Page-Specific Class Finally, add the page-specific class name, which in this case usually relates to the placement of the button on the page. The class naming standard .btn--page-name should be used in the dedicated scss file for a specific page, for instance in _wins-page.scss . If there is more than one type of the same component in a page and they both require different page-specific classes, the class names can also include more specifics about the components- i.e. .btn--wins-page-submit and .btn--wins-page-survey . In the end, the classes you selected and added to your component in HTML should look something like this:","title":"Standardized Components"},{"location":"Standardized-Components/#overview","text":"We are standardizing the buttons, page cards, and other reusable components across all pages on the HfLA website. This is to: Prevent the slight differences we found between components on different pages during our site audit Make the site\u2019s code more scalable and easier to manage Help designers pull from existing standard designs when creating new pages Help developers build new pages with existing styles instead of starting from scratch on each new page We are following bootstrap and other class standards and naming conventions, as well as input from the HfLA team. This is a work in progress and we want to make sure this is actually useful and usable, so please feel free to provide any feedback on the #hfla-site slack channel or DM @daniellenedivi who worked on the design system.","title":"Overview"},{"location":"Standardized-Components/#reusability","text":"To make our reusable components available across the site, we made their CSS classes more universal and less page-specific. These reusable classes now live in common .scss files ( _buttons,scss , _page-cards.scss , etc), instead of in specific pages\u2019 scss files ( _wins-page.scss , etc), to make them easier to find and available for all pages. Each of the reusable components on our site now have several class names - one for their size, one for color, etc. This way if any style changes need to be made later on - i.e. to change every pink button to blue - the change can be made only to the CSS color class and will update all of the buttons that share that class, without having to edit every single button\u2019s unique class separately. For this reason the class names are also more generic. Similar to Bootstrap, the button class related to color is called .btn-primary instead of .btn-pink to allow for future color changes. Now the style of a specific button is also easy to quickly adjust, by switching class names in the html depending on the component size, color, etc. that you want. If you want to switch from a pink to a black button, change the class names attached to that button in the HTML from .btn-primary (pink) to .btn-dark (black). Reusable component class names include: Base class: used in every single instance of a component, this is the foundational class with properties they all share (ex: .btn , .page-card ) Size class: from xs to xl, this class sets and relates to the size of the component (ex: .btn-xl , .page-card-lg ) Color class: Sets the color of the component (ex: .btn-primary , .page-card-secondary ) Page-specific class: Includes any features that are unique to a component on a specific page - usually its placement (ex: .btn--about-us ) Additional standard classes may be added in the future as new components and variations are created.","title":"Reusability"},{"location":"Standardized-Components/#getting-started","text":"Insert all of the class names that apply to the button component you are building in HTML. This often leads to a long list of classes, but this is common when working with reusable components.","title":"Getting started"},{"location":"Standardized-Components/#base-class","text":"Start with adding the base class of the component. Using buttons as an example, the base class .btn should be used in all buttons and includes the properties they all share, no matter the size or color: Next, add the standard button classes (that currently relate to color and size ) :","title":"Base class"},{"location":"Standardized-Components/#size-class","text":"Continuing with the button example, the size classes .btn-xl , .btn-lg , .btn-md etc. should be used depending on the standard size of the button in the page you are developing:","title":"Size Class"},{"location":"Standardized-Components/#color-class","text":"The color classes .btn-primary , .btn-primary-on-dark , and .btn-dark etc. should be used depending on the color of the button in the page you are developing:","title":"Color Class"},{"location":"Standardized-Components/#page-specific-class","text":"Finally, add the page-specific class name, which in this case usually relates to the placement of the button on the page. The class naming standard .btn--page-name should be used in the dedicated scss file for a specific page, for instance in _wins-page.scss . If there is more than one type of the same component in a page and they both require different page-specific classes, the class names can also include more specifics about the components- i.e. .btn--wins-page-submit and .btn--wins-page-survey . In the end, the classes you selected and added to your component in HTML should look something like this:","title":"Page-Specific Class"},{"location":"Success-Metrics/","text":"We have identified several preliminary KPIs and metrics that will allow the project team to gauge success in resolving the established objectives. These KPIs and metrics may change over time to better reflect the priorities of product development at any given time. Any feedback that may improve our analytic measures is welcome. KPI targets may include: Increase average weekly site-specific meetup foot traffic by X% in 3 months Increase average project-specific membership by Y% in 3 months Web metrics may include: Home page bounce rate Project page bounce rate User actions per website visit Weekly project inquiry rate Hacknight metrics may include: Weekly attendees / Monthly attendees Monthly attendee retention rate = (volunteers at end of period \u2013 new volunteers gained during period) / (volunteers at start of period) * 100 Monthly attendee churn rate = Volunteers lost / Total volunteers Net Promoter Score","title":"Success Metrics"},{"location":"Team/","text":"Team Roster","title":"Team"},{"location":"Template-of-a-communities.md-file-%28for-Communities-of-Practice-page%29/","text":"Use this to describe a Community of Practice. Entries are placed in the _communities/ folder. Jekyll pulls them into the cards on the Communities of Practice page. --- # the name of the CoP name: description: # if this is \"true\", it'll show up on the page. If \"false\", it'll be hidden visible: # Common values: Active, On Hiatus, Seeking status: location: - Remote # There's flexibility in the size/ratio, but works best if 1200px W x 800px H or 600 x 400 JPG image: /assets/images/communities-of-practice/group.jpg alt: 'A person uses a laptop to review a data dashboard' # Day X:00-Y:00 pm PT (frequency: every week, every other week) meeting-times: # Common values: Mentor Led, Peer Led, Seeking leadership-type: leadership: - name: First Last role: Co-lead links: slack: https://hackforla.slack.com/team/xxxxxx github: https://github.com/githubusername picture: https://avatars.githubusercontent.com/u/xxxxxxx - name: First Last role: Co-lead links: slack: https://hackforla.slack.com/team/xxxxxx github: https://github.com/githubusername picture: https://avatars.githubusercontent.com/u/xxxxxxx links: - name: Slack url: https://www.example.com - name: Github url: https://www.example.com # Fill this out if we're trying to recruit someone to start the CoP. It will only show up if CoP Status is \"Seeking\" recruiting-message: --- Sample CoP.md file for reference Sample recruiting message: If you've been working on a Hack for LA project for a month or more and are interested in organizing this group, join us at the Project/Product Management Community of Practice meeting to talk about how we can help you get this off the ground (the project leads will be able to get the word out to their project team). Slack link for leadership (Copied from project.md wiki) To create a Slack link for each person, go to the project's Slack channel, find a message from that person. Click on their name; this should give you a popup window with the user's picture, name, and a link to \"View full profile\". Click on \"View full profile\". That pane gives you the options message, call, and more. Click on \"more\" and you should be shown \"Copy member ID\" followed by the actual id. This is the id you need to use in the slack url, e.g. https://app.slack.com/team/<member_id_here`","title":"Template of a communities.md file (for Communities of Practice page)"},{"location":"Template-of-a-credit.md-file-%28for-Credits-page%29/","text":"Use this to describe the attribution/credit for any images used on the HfLA website. Entries are placed in the _credits/ folder. Jekyll pulls them into the cards on the Credits page. --- title: title-link: # the type of image - icon, photo, etc. content: # the page it's used on used-in: Guides artist: # name of the image database you found it on provider: # OK to just give the general site URL, not the exact link provider-link: # Location in our GitHub repo image-url: alt: # apparently the same as content type: --- Sample credit.md file","title":"Template of a credit.md file (for Credits page)"},{"location":"Template-of-a-project.md-file/","text":"Template of a project.md file --- # 'identification' is the 9 digit ID for your repo in the GitHub API. identification: '' title: description: # card image should be 600px wide x 400px high image: /assets/images/projects/[project repo name + .jpg or .png] alt: 'description of the card image' # hero image should be 1500px wide x 700px high image-hero: /assets/images/projects/[project repo name + -hero + .jpg or .png] alt-hero: 'description of the hero image' leadership: - name: First Last role: Product Manager links: slack: 'https://hackforla.slack.com/team/xxxxxx' github: 'https://github.com/githubusername' picture: https://avatars.githubusercontent.com/githubusername - name: Given Surname role: Lead links: slack: 'https://hackforla.slack.com/team/xxxxxx' linkedin\" 'https://linkedin.com/linkedin-username' picture: https://avatars.githubusercontent.com/githubusername links: - name: Github url: 'https://www.example.com' - name: Slack url: 'https://www.example.com' - name: Test Site url: 'https://test.example.com' - name: Demo Site url: 'https://demo.example.com' - name: Site url: 'https://live.example.com' - name: Overview url: https://github.com/hackforla/product-management/blob/master/project-one-sheets/[REPLACE WITH PROJECT NAME]-Project-One-Sheet.pdf # unused links can be commented out # - name: Showcase deck # url: '' # alt: '' looking: - category: Development skill: one skill - category: UI/UX skill: another skill - category: Content skill: Researcher technologies: - Node.js - ReactJS - Ruby on Rails - other etc. location: - Downtown LA - Santa Monica - South LA # must choose one of the above (closest) partner: tools: figma, photoshop, sketch, phone calls. vertical: status: # If the card should not be included on the site, change visible to \"false\" visible: true # If the project should not have a project homepage for any given reason, add the following line (uncommented): # project-homepage: false # For completed projects. Uncomment and add contact info if provided # completed-contact: --- Data for the 'languages' and 'contributors' sections is pulled from the project's GitHub main repository using the GitHub API. In order to merge the GitHub API data into the finished card, you need to put the project's GitHub id in the 'identification field'. To find the id, go to the GitHub homepage for the project's main repository and search the page source for <meta name=\"name=\"octolytics-dimension-repository_id\" content=\"#####\"> ; the number in the 'content' field is the id you want. Sample project .md file for reference image naming decision record Links On the project homepage: Links with the names \"GitHub\", \"Site\", \"Demo Site\", and \"Test Site\" displayed in the \"Links\" section in the left half of the Project Overview. Links named Wiki and Readme are displayed under the \"Getting Started\" dropdown All links are also displayed in the \"Resources\" section at the bottom of the project homepage On the project card on HfLA homepage: all links are displayed Leadership To create a Slack link for each person, go to the project's Slack channel, find a message from that person. Click on their name; this should give you a popup window with the user's picture, name, and a link to \"View full profile\". Click on \"View full profile\". That pane gives you the options message, call, and more. Click on \"more\" and you should be shown \"Copy member ID\" followed by the actual id. This is the id you need to use in the slack url, e.g. https://app.slack.com/team/<member_id_here","title":"Template of a project.md file"},{"location":"Template-of-a-project.md-file/#links","text":"On the project homepage: Links with the names \"GitHub\", \"Site\", \"Demo Site\", and \"Test Site\" displayed in the \"Links\" section in the left half of the Project Overview. Links named Wiki and Readme are displayed under the \"Getting Started\" dropdown All links are also displayed in the \"Resources\" section at the bottom of the project homepage On the project card on HfLA homepage: all links are displayed","title":"Links"},{"location":"Template-of-a-project.md-file/#leadership","text":"To create a Slack link for each person, go to the project's Slack channel, find a message from that person. Click on their name; this should give you a popup window with the user's picture, name, and a link to \"View full profile\". Click on \"View full profile\". That pane gives you the options message, call, and more. Click on \"more\" and you should be shown \"Copy member ID\" followed by the actual id. This is the id you need to use in the slack url, e.g. https://app.slack.com/team/<member_id_here","title":"Leadership"},{"location":"Tools/","text":"Product Management Product Requirements Document Website Development Workflow Diagram Survey Forms Remote Onboarding Survey New Member Survey Project Leader Survey Donor/Sponsor Survey Non-Profit Survey Government Survey Transportation Survey Other Survey Google Analytics Google Analytics Free tools Full screen capture tool for Chrome","title":"Tools"},{"location":"Tools/#product-management","text":"Product Requirements Document Website Development Workflow Diagram","title":"Product Management"},{"location":"Tools/#survey-forms","text":"Remote Onboarding Survey New Member Survey Project Leader Survey Donor/Sponsor Survey Non-Profit Survey Government Survey Transportation Survey Other Survey","title":"Survey Forms"},{"location":"Tools/#google-analytics","text":"Google Analytics","title":"Google Analytics"},{"location":"Tools/#free-tools","text":"Full screen capture tool for Chrome","title":"Free tools"},{"location":"UI-UX-Designer/","text":"Review the Software Lifecycle Diagram . Review the Personas and User Stories Board . Read about WCAG 2.0 accessibility standards . Review the Project Management Board and identify an actionable backlog item. Communicate with PM your interest in being assigned a task. Review the Project Terminology .","title":"UI UX Designer"},{"location":"Using-Git-GUI-%28Graphical-user-Interface%29-in-Visual-Studios-Code/","text":"You should never blindly add all files that have been changed using git add . . That being said, you should always double-check the files changed and make sure those are the intentional changes you planned on. You can do this using the Git GUI. Check if the Git GUI is visible in your left sidebar. If not you can right-click on the sidebar and confirm that Source Control is checked. Click on the source control icon. Click on the file you made changes on and confirm they are the correct changes. If they are the correct changes you can hover over the file and click on the + sign to stage your changes. If you happen to make a mistake and added the wrong file or no longer want to add it you can hit the - sign to remove it. If desired you can also discard all the changes made to the file altogether by hovering over the file and clicking on the return arrow once it has been removed from the staged changes. After checking and adding all the files you would like, you can double-check all files that are staged by using the command git status or looking at the Staged Changes header in the Git GUI sidebar. You can now proceed with the regular process and use the commands git commit -m \"changes made\" , git fetch upstream , and git push outlined in the contributing wiki","title":"Using Git GUI (Graphical user Interface) in Visual Studios Code"},{"location":"WCAG-2.0-Compliance/","text":"Use the following tools to ensure that development code is accessibility compliant: aXe SiteImprove Tenon WAVE Lighthouse","title":"WCAG 2.0 Compliance"},{"location":"Web-Developer/","text":"Read the development Readme and set up your development environment. Review the Software Lifecycle Diagram and the notes on security updates Review the Coding Project Board and identify an actionable backlog item. Read about WCAG 2.0 accessibility standards and set up third-party tools for compliance testing. Communicate with PM your interest in being assigned a task. Review the Project Terminology . Your first commit will likely be to update a project card. Familiarize yourself with the Project Card Format . Read through Hack for LA Site Architecture and come up with questions 1) it does not answer immediately and 2) as you begin work. Supply all feedback in Issue 529 .","title":"Web Developer"}]}